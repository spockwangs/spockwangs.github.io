<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Spockwang's Blog]]></title>
  <link href="http://spockwangs.github.io/atom.xml" rel="self"/>
  <link href="http://spockwangs.github.io/"/>
  <updated>2019-01-09T13:27:54+08:00</updated>
  <id>http://spockwangs.github.io/</id>
  <author>
    <name><![CDATA[spockwang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Paper Review: Don’t Settle for Eventual: Scalable Causal Consistency for Wide-Area Storage With COPS]]></title>
    <link href="http://spockwangs.github.io/blog/2019/01/08/paper-review-cops/"/>
    <updated>2019-01-08T13:04:46+08:00</updated>
    <id>http://spockwangs.github.io/blog/2019/01/08/paper-review-cops</id>
    <content type="html"><![CDATA[<p>这篇<a href="https://www.cs.cmu.edu/~dga/papers/cops-sosp2011.pdf">论文</a>描述了如何设计保证因果一致性又不牺牲
可用性的分布式存储系统。与传统的强调可用性的分布式系统相比，因果一致性模型对程序员更加友好，又不牺牲
性能。
<!-- more --></p>

<h3 id="lamport">为什么要在Lamport时钟后附加节点标示符使写入操作的版本号全局唯一？</h3>

<p>不唯一会导致两个问题：</p>

<ol>
  <li>跟踪的依赖不准确，在复制到其它集群时判断依赖是否已经满足时会导致误判：依赖还未写入时会误以为已经
写入。</li>
  <li>无法解决并发写数据时的冲突，由于Lamport时钟不是全序，导致在解决并发冲突时计算最终结果时时不确定的，
这样会导致数据继续分叉。</li>
</ol>

<h3 id="cops-gt">为什么COPS-GT需要存储完整的依赖而不是从直接依赖计算出完整的依赖？</h3>

<p>一个依赖包含key和version，每个key只会存储最近一段时间的version及其直接依赖，所以直接依赖的version可
能已经不存在了，也就无法计算出完整的依赖。</p>

<p>举个例子，假如存有如下数据：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;key=a, version=1, deps=[&lt;key=b, version=1&gt;]&gt;
</span><span class="line">&lt;key=c, version=1, deps=[&lt;key=a, version=1&gt;]&gt;</span></code></pre></td></tr></table></div></figure>
<p>数据c直接依赖a，间接依赖b。然后a更新了同时删除其旧版本：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;key=a, version=2, deps=[]&gt;
</span><span class="line">&lt;key=c, version=1, deps=[&lt;key=a, version=1&gt;]&gt;</span></code></pre></td></tr></table></div></figure>
<p>数据c依然依赖a，但是我们却丢失c对b的依赖信息。</p>

<h3 id="section">数据中心之间同步时如何保证依赖得到满足？</h3>

<p>论文中没有详述，但我想是这样，在消费复制队列时检查依赖在本地是否满足，若没有满足则等待一段时间重试。
没满足的依赖肯定在队列的后面，等待应该是异步的，否则阻塞了队列的消费会导致依赖永远不会被满足。为了优
化这里的重试，消费队列的节点可以跟踪没有满足的依赖，每当消费一个队列元素时则更新这个依赖关系，一旦满
足了条件就立即重试。</p>

<p>另外一种解决办法是操作的发送方在写入消息队列时按依赖的拓扑顺序写入，消费端也按序消费，这样就不用检查
依赖关系了。不过这会导致发送方逻辑变得复杂，而且也会导致消费端吞吐量下降。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paper Review: Deep Neural Networks for YouTube Recommendations]]></title>
    <link href="http://spockwangs.github.io/blog/2018/12/22/paper-review-deep-neural-networks-for-youtube-recommendations/"/>
    <updated>2018-12-22T22:56:26+08:00</updated>
    <id>http://spockwangs.github.io/blog/2018/12/22/paper-review-deep-neural-networks-for-youtube-recommendations</id>
    <content type="html"><![CDATA[<p>这篇论文描述了YouTube的一个召回和排序模型，是整个推荐系统的一部分，但是也比较完整，从数据处理、召回
到排序生成最终的推荐列表都有描述，是学习一个推荐系统的绝佳材料，其中很多细节也很值得学习。
<!-- more --></p>

<h1 id="section">架构</h1>

<p>推荐系统整体架构如下图所示：
<img src="http://spockwangs.github.io/images/youtube_architecture.png" /></p>

<p>架构分为两个步骤：从视频库（百万级）中筛选出一小部分用户喜欢的视频（约几百个），称为召回，然后再对这
些视频打分排序输出最高的几十个，称为排序。召回是初步筛选，目的是大幅减少候选集减少排序的计算量，所用
的特征较少，模型也相对简单些。排序是精选，由于候选集已减少到几百个，可以使用更复杂的特征和模型。分为
这两步还有一个好处就是可以与其它召回策略组合。</p>

<h1 id="section-1">召回</h1>

<p>召回的目的就是从数百万个视频中筛选出与用户最相关的几百个视频，所以面临如下两个挑战：</p>

<ul>
  <li>召回率要足够高</li>
  <li>计算速度要快</li>
</ul>

<h2 id="section-2">模型的设计</h2>

<p>召回模型的设计主要受上一代推荐模型矩阵分解和NLP领域词向量模型的启发。矩阵分解模型根据用户对视频的行
为来表达用户与视频的关系，这样可以对相似的用户推荐相似的视频，是一种协同过滤算法，不需要学习视频的语
义，难度会小很多，缺点是只能推荐已经有人播放过的视频，无法解决视频的冷启动问题。矩阵分解可以看作是浅
层的神经网络，模型的迭代是在此基础上可以增加深度和宽度增加模型的表达能力。</p>

<p>召回问题可以看作是一个多分类问题，给定用户$U$和上下文$C$预测观看视频库$V$中某个视频$v_i$的概率:</p>

<script type="math/tex; mode=display">P(i|U,C) = \frac{\exp(v_i^Tu)}{\sum_{j\in V}\exp(v_j^Tu)}</script>

<p>其中$u\in\mathbb{R}^N$(论文中$N=256$)是描述用户和上下文的向量，$v\in\mathbb{R}^N$是描述视频的向量。
这个模型的目标就是从用户的特征和上下文学习到用户的向量表达用于区分对不同视频的偏好。剩下的问题就是如
何得到视频向量，要保证视频向量能表达出与用户向量之间的关系。受NLP领域词向量模型的启发我们可以在同一
个模型中学习视频的向量，这样就可以保证视频向量与用户向量的距离可以描述两者之间的关系。</p>

<p>使用$z_i = v_i^Tu$，则可计算softmax交叉熵的损失函数为：</p>

<script type="math/tex; mode=display">loss = -\sum_{i\in V}y_i\log P(i|U,C)</script>

<p>其中$y_i$表示样本label中的第$i$个分量，只有一个分量是1（对应于正样本），其它分量是0（对应于负样本），所以：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
loss &= -\log P(t|U,C) & (假设y_t=1，其余分量为0) \\
&= -\log\frac{\exp(z_t)}{\sum_{i\in V}\exp(z_i)} \\
&= -z_t + \log\sum_{i\in V}\exp(z_i)
\end{align} %]]&gt;</script>

<p>对参数求导求其梯度可得：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\nabla loss &= -\nabla z_t + \nabla\log\sum_{i\in V}\exp(z_i) \\
&= -\nabla z_t + \sum_{i\in V}\left(\frac{\exp(z_i)}{\sum_{j\in V}\exp(z_j)}\nabla z_i\right) \\
&= -\nabla z_t + \sum_{i\in V}P(i|U,C)\nabla z_i
\end{align} %]]&gt;</script>

<p>上述第二个式子需要对整个视频库求和，计算量非常大，但我们看出它其实是一个概率均值：</p>

<script type="math/tex; mode=display">\mathbb{E}_P[\nabla z_i]</script>

<p>其中$P$表示$P(i|U,C)$. 我们可以采用importance sampling来简化对这个式子的计算。预定义一个采样分布$Q$
从视频库的一个比较小的子集$V’$（数千个）中采样，我们可以近似计算：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\mathbb{E}_P[\nabla z_i] &\approx \sum_{i\in V'}\frac{\exp(z_i)/Q(i)}{\sum_{j\in V'}\exp(z_j)/Q(j)}\nabla z_i
\end{align} %]]&gt;</script>

<h2 id="section-3">特征工程</h2>

<p>召回主要使用了用户近期行为（最近观看过的视频和搜索串）和人口学特征。近期观看过的视频通过视频向量求平
均值作为输入。搜索串另外用语言模型训练出词向量然后求平均值输入。人口学特征有助于解决冷启动用户的推荐
问题。用户的地理位置、设备使用one-hot编码向量作为输入。年龄、性别及登陆态作为连续变量归一化到$[0, 1]$.</p>

<p>用户一般喜欢看新上传的视频，而且视频在不同时间点的点击率也很不一样，所以模型必须能够表达出点击偏好与
时间之间的关系。因此必须输入一个与时间有关的特征，这个特征能表达出过去观看行为与未来预测之间的时间差。
论文中是以当前训练时间为基点计算样本的年龄（即训练时间减去样本时间），预测时输入即将预测的样本的年龄
（预测时间减去训练时间，为0或一个较小的负数）。</p>

<h2 id="section-4">训练和评估</h2>

<p>推荐系统解决的往往是一个代理问题而不是真实的目标问题（推荐的目标是找到让用户满意的视频，但是用户的满
意度是无法衡量的，所以召回模型退而求其次去优化点击率）。代理问题的存在会极大影响线上AB测试的性能，但
是离线评估时很难衡量。所以特征和样本的选择需要仔细权衡，不能导致过于拟合代理问题反而恶化真实目标。</p>

<p>训练的样本不仅仅包括推荐系统的结果，还包括其它路径的观看结果。这样是为了避免推荐系统的偏见，无法推出
新的内容。如果用户从其它途径观看了视频，我们也希望可以通过协同过滤学习到这个行为把视频推荐给其它用户。
为了防止过拟合代理问题，有时候还需要对模型隐瞒一些信息。比如用户搜索一个查询串后会出现跟这个查询串相
关的视频，如果把这个当成样本给模型学习会导致预测的下一个观看视频就是上次搜索过的视频，这个并不是用户
想要的。构造样本时把查询串的顺序信息丢掉可以避免这个问题。</p>

<p>用户观看视频通常会表现出非对称行为。比如观看系列视频往往从第一集开始看起，而不是反过来。为了让模型学
习到这种规律，构造样本时也要保留这个顺序，而不是用未来的观看行为来预测过去的行为。</p>

<p>模型的网络结构像一个塔一样，第一层最宽，而后逐渐变窄，最后一层最窄。先从最简单的2层（包括输出层）开
始训练，逐渐增加深度和宽度，直到收益递减而收敛变慢为止。最终的网络结构如下所示：</p>

<p><img src="http://spockwangs.github.io/images/youtube_recall_network.png" /></p>

<h1 id="section-5">排序</h1>

<p>排序的目标是根据曝光预测观看视频的时长，使用时长而不是点击率更加符合业务目标。排序模型可以使用更多的
特征，因为候选的视频只有数百个。</p>

<p>输入特征主要分为两类：分类特征和连续特征。分类特征转化为一个稠密的向量表示，每个独立的特征空间都有自
己的向量空间，向量的纬度正比于特征空间的秩。如果特征空间的秩很大（比如视频和搜索串），则按点击频率取
最高的一部分，其余特征的向量取0. 多个分类特征的向量表达取其平均值。神经网络对连续特征的分布和取值范
围很敏感，所以需要归一化。连续特征都在训练之前根据其分布均匀归一化到$[0, 1]$（所谓均匀归一化是指归一化
后的每个取值的频率都相等）。另外，连续特征在归一化后还会取起平方和平方根以学习非线性规律。</p>

<p>为了预测观看视频的时长，模型的目标是加权的逻辑回归，即在计算逻辑回归的交叉熵损失函数时，正样本用观看
时长加权，而负样本使用1加权，则其损失函数为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
loss=
\begin{cases}
-T_i \log \sigma(z) & \text{正样本，其中T_i表示观看时长} \\
-\log(1-\sigma(z)) & \text{负样本}
\end{cases} %]]&gt;</script>

<p>相当于一个正样本重复了$T_i$次，于是逻辑回归模型学习到的odds是：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\exp(z) &= \frac{\sum{T_i}}{N-k} \\
&= \mathbb{E}[T](1+\frac{k}{N-k}) \\
&\approx\mathbb{E}[T] & (假设k很小)
\end{align} %]]&gt;</script>

<p>所以预测时采用$\exp$作为最后一层的激活函数。</p>

<p>迭代模型时于召回模型一样，逐步增加深度和宽度并观察线上测试效果，同时要兼顾模型预测耗时。</p>

<p><img src="http://spockwangs.github.io/images/youtube_rank_network.png" /></p>

<h1 id="conclusions">Conclusions</h1>

<p>论文中的模型虽然没有特别的创新之处，但是很多工程细节包括学习目标的设计、特征和样本的选择、模型的迭代
设计等却非常值得我们学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paper Review: Google Dapper]]></title>
    <link href="http://spockwangs.github.io/blog/2018/08/20/paper-review-google-dapper/"/>
    <updated>2018-08-20T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2018/08/20/paper-review-google-dapper</id>
    <content type="html"><![CDATA[<p>本文对Google的论文”<a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/papers/dapper-2010-1.pdf">Dapper, a Large-Scale Distributed Systems Tracing Infrastructure</a>“的总结，这篇论文描述了Google的分布式跟踪系统Dapper.</p>

<!-- more -->

<h1 id="introduction">Introduction</h1>

<p>现代的互联网服务通常都是实现为复杂的大规模分布式系统，由许多分布在不同机器上的模块组成，这些模块可能
是不同团队用不同编程语言开发的。开发一个工具用于帮助理解这个系统的行为、诊断性能问题是很有价值的。
Dapper就是Google开发的这样一个分布式系统跟踪工具。</p>

<p>考虑一个例子：web搜索引擎。前端服务会将一个搜索请求分发到许多查询服务器，每个查询服务器负责检索本地
的索引分区。这个查询还会被分发到其它子系统处理诸如广告、拼写检查之类的工作。最后，所有这些服务的结果
汇总成一个搜索结果页面。为了完成一个搜索查询需要许多机器协调工作，而且搜索对延迟是很敏感的。仅仅查看
整体的耗时只能知道存在性能问题，但是无法知道是哪个服务导致的，也不知道原因。对于一个搜索查询，工程师
并不知道有哪些服务在处理，因为系统在不断增加新服务。而且有很多服务是不同团队负责的，工程师无法知道每
个服务的内部细节。很多服务会共享机器，所以性能问题也有可能是同机部署的其它服务导致的。</p>

<p>根据上述例子我们可以发现分布式跟踪系统在空间上必须无所不在，在时间上持续监控。这就导致如下三个需求：
- 低开销：跟踪系统必须对服务有几乎可忽略的影响。
- 对应用开发者透明：开发者不需要关注这个跟踪系统。如果还需要开发者来介入，必然会导致遗漏。
- 可伸缩性：能够应对大规模的分布式系统。</p>

<p>另外，跟踪数据从产生到可以分析的延迟要足够短。</p>

<h1 id="dapper">Dapper的系统设计</h1>

<p>分布式跟踪必须记录一次请求发起到处理完成的整个过程。一个有用的信息必须包括请求的唯一标识和每个服务器
发送和接收消息的时间戳。</p>

<p><img src="http://spockwangs.github.io/images/dapper_figure_1.png" /></p>

<p>有两种方法可以将一次请求涉及到的所有服务的信息聚合起来：
1. 黑盒：仅需要每个服务的消息记录，然后使用统计学模型推断消息之间的关联关系。
2. 基于注解：每个消息都用一个全局唯一的标识符标记以便与请求关联起来。</p>

<p>黑盒方法尽管可移植性更好，但是需要更多的数据才会有足够的正确性。基于注解的方法的主要缺点就是要对程序
进行修改，但是由于Google的服务都是用的统一的代码库实现RPC、控制流，所以只需要对这些代码库进行修改即
可，对服务开发者是透明的。</p>

<h2 id="trace-trees-and-spans">Trace trees and spans</h2>

<p>一次请求的跟踪可以看成一颗树，每个节点对应一个服务称为span. 边表示服务的上下游关系。每个span都有一个
trace id, span id和parent span id. trace id用于唯一标识一个请求，span id用于唯一标识一个span. parent
span id用于标记span的上游。这些ID都是64位的随机数。</p>

<p><img src="http://spockwangs.github.io/images/dapper_figure_2.png" /></p>

<p>span记录了消息的开始和结束时间以及其它事件时间和服务开发者提供的相关注解信息。注意：span的数据可能来
自多个机器。比如，一个RPC span包含了客户端和服务端的信息。</p>

<p><img src="http://spockwangs.github.io/images/dapper_figure_3.png" /></p>

<h2 id="intrumentation-points">Intrumentation points</h2>

<p>Dapper通过修改公共库来实现应用透明，主要集中在三点：
- 线程模型，每个线程使用私有存储保存trace上下文.
- 异步控制流保证每个回调函数能正确处理trace.
- RPC库负责将trace id和span id传递给下游.</p>

<h2 id="annotations">Annotations</h2>

<p>除了修改框架自动产生跟踪数据外，Dapper也提供API允许服务开发者添加应用相关的信息方便调试。为了防止添
加过多的数据，每个span都会限制数据大小。</p>

<h2 id="trace">Trace的搜集</h2>

<p>Trace的搜集有3步：(1) span数据写入本地文件, (2) Dapper从每个机器上读取数据然后(3)写入Bigtable.
一个trace就是Bigtable的一行，trace id是key，每一列一个span. 数据从产生到写入存储的中位数耗时是15秒。</p>

<p><img src="http://spockwangs.github.io/images/dapper_figure_5.png" /></p>

<p>从上面的描述我们可以看出trace的搜集是分开进行的（每个机器只负责记录本机的信息，而不是搜集下游的信息一起记录），原因有2个：
1. 搜集下游的信息会导致响应过大，特别是对根节点服务。
2. 不是所有的请求都是嵌套的，有些请求是异步的，下游在处理完之前会先发送响应给上游。</p>

<h2 id="section">安全和隐私</h2>

<p>有些场景对安全和隐私很敏感，记录RPC的数据会暴露安全风险。所以Dapper仅存储RPC的名字，不记录其中的数据。
不过Dapper提供一些选项让开发者自行决定是否记录一些有用的数据。</p>

<p>通过跟踪安全协议参数，Dapper可以监控服务是否满足安全政策的要求。</p>

<h1 id="section-1">性能优化</h1>

<p>Dapper对性能的影响有3点：trace的生成，trace的搜集和Dapper对生产服务的影响。</p>

<p>生成trace的成本主要是创建和销毁span以及写入磁盘。trace的注解也会产生额外的开销，不过只有在trace被采
样的时候。将span写入磁盘是开销最大的，通过批量写入和异步写入大大减少了对应用服务的影响。但是写入操作
仍然会对高吞吐的应用产生一定的影响。</p>

<p>在生产服务器上搜集trace数据也会影响生产服务进程。我们通过限制Dapper进程的调度优先级减小对CPU的竞争。
Dapper进程也会消耗少量的网络带宽（不到0.01%）。</p>

<p>为了评估Dapper进程对生产服务造成的影响，我们使用搜索集群作为例子来测量Dapper对平均耗时和吞吐量的影响。</p>

<p><img src="http://spockwangs.github.io/images/dapper_table_2.png" /></p>

<p>虽然对吞吐量的影响很小，但为了避免对耗时产生影响，跟踪数据的采样还是有必要的。采用更低的采样频率可以
让跟踪数据保留的时间更长些，给Dapper搜集服务更多时间。高吞吐量的服务采用更低的采样频率可以有效降低开
销，而且由于事件发生的频率足够高，降低采样频率也会捕获到这些事件。但是对于低吞吐量的服务就必须提高采
样频率了。所以，采样频率应该能够自适应。实际使用的采样频率与跟踪数据一起记录下来，方便分析工具据此统
计跟踪频率。</p>

<p>上述的采样是为了减小生成跟踪数据时对应用程序产生影响。Dapper还需要控制写入存储的数据量，以减小成本和
降低对BigTable的写入带宽。所以还需要第二轮采样，在搜集跟踪数据时计算trace id的hash值<code>z</code>($0 \leq z \leq
1$)，如果小于设置的采样比例就写入Bigtable，否则就丢弃。由于在不同的机器上一次请求的trace id是相同的，
这种方法能保证要么保留一个trace的所有数据，要么全部丢弃，不会只保留一部分的情况。</p>

<h1 id="dapper-1">Dapper工具设计</h1>

<p>Dapper提供了API和web界面用于分析跟踪数据。提供的API主要有以下这些：
- 根据trace id访问
- 批量访问：指定时间窗口访问所有的trace
- 根据索引查询：支持按服务名、机器和时间戳的联合索引查询。</p>

<h1 id="section-2">使用经验</h1>

<ul>
  <li>开发时使用Dapper，表现在以下方面：
    <ul>
      <li>优化性能：Dapper有助于找出优化点。比如可以找出不必要的串行请求，特别是这些可能是其他人开发的子系统
发起的。</li>
      <li>正确性：观察服务之间的调用关系判断请求的下游是否正确。</li>
      <li>帮助理解系统行为</li>
      <li>测试</li>
    </ul>
  </li>
  <li>解决长尾耗时
    <ul>
      <li>调试大型分布式系统的耗时问题是很困难的，因为很难重现。调试必须先建立假设，然后再通过数据来验证或
推翻假设来定位原因，这需要不断试错。Dapper提供的数据有助于快速验证试错，提高调试效率。</li>
    </ul>
  </li>
  <li>监控服务网络流量
    <ul>
      <li>网络监控工具可以发现异常的网络流量，但是却无法找到原因，而Dapper有助于这一点。</li>
    </ul>
  </li>
  <li>监控共享资源的消耗情况
    <ul>
      <li>许多不同的业务都会依赖共享的存储服务（比如Bigtable，GFS，Chubby等），仅从这些服务来看很来知道请
求的最终来源，也不知道不同业务对其资源的消耗情况。Dapper可以将整个请求处理栈汇集起来，有助于了解
共享资源是被谁使用的。</li>
    </ul>
  </li>
</ul>

<h1 id="conclusion">Conclusion</h1>

<p>Dapper相当于是分布式版本的<code>gstack</code>，可以查看分布式系统的调用栈，帮助理解系统行为，诊断性能瓶颈。在实
际使用过程中取得了良好的效果，也有以下一些局限性需要优化。
- 对批处理的支持：Dapper假设一次只处理一个跟踪的请求，如果将多个请求合并起来处理将无法区分。
- 对离线负载的支持：Dapper是设计来跟踪在线服务的。跟踪离线负载入MapReduce任务时需要将trace id跟某个
  工作单元联系起来。
- 诊断根因：Dapper有助于找出有问题的服务，但是不足于发现根本原因。
- 记录内核级别的信息：这有时候方便找出根因。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译独立的Tensorflow Serving库]]></title>
    <link href="http://spockwangs.github.io/blog/2018/02/06/build-independent-tensorflow-serving-library/"/>
    <updated>2018-02-06T15:51:48+08:00</updated>
    <id>http://spockwangs.github.io/blog/2018/02/06/build-independent-tensorflow-serving-library</id>
    <content type="html"><![CDATA[<p>Tensorflow Serving的<a href="https://www.tensorflow.org/serving/setup?hl=zh-cn">官方文档</a>仅支持编译集成gRPC的模型预测服务，不方便开发者集成自己的框架中。本文将介绍一种方法编译独立的静态Tensorflow Serving库，开发者可直接调用Serving的API进行模型预测，方便集成至自己的服务中。
<!--more--></p>

<h2 id="section">准备编译环境</h2>

<ol>
  <li>安装Bazel</li>
  <li>安装Python 2.7</li>
</ol>

<h2 id="tensorflow-serving">编译Tensorflow Serving</h2>

<h3 id="tensorflow-serving-1">下载Tensorflow Serving源代码</h3>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone --recurse-submodules https://github.com/tensorflow/serving</span></code></pre></td></tr></table></div></figure>

<p>注意<code>--recurse-submodules</code>是为了下载子模块<code>tensorflow</code>和<code>tf_models</code>.
以下命令都在源代码根目录下执行。</p>

<h3 id="gpu">支持GPU</h3>

<p>不需要支持GPU可跳过该步骤。</p>

<p>支持GPU需要安装CUDA，而这需要一些先决条件，可参考<a href="http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4RD7GVh1d">官方手册</a>.</p>

<p>安装完后记录以下信息，配置Tensorflow时会用到：</p>

<ul>
  <li>CUDA的安装目录，一般是<code>/usr/local/cuda</code></li>
  <li>CUDA的版本，查看文件<code>/usr/local/cuda/version.txt</code></li>
  <li>cuDNN的版本</li>
</ul>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</span></code></pre></td></tr></table></div></figure>

<h3 id="tensorflow">配置Tensorflow</h3>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd tensorflow
</span><span class="line">$ ./configure
</span><span class="line">$ cd ..</span></code></pre></td></tr></table></div></figure>
<p>可参考https://www.tensorflow.org/install/install_sources?hl=zh-cn#configure_the_installation</p>

<h3 id="tensorflow-serving-2">编译Tensorflow Serving</h3>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bazel clean
</span><span class="line">$ bazel build -c opt --incompatible_load_argument_is_label=false \
</span><span class="line">    --cxxopt=-march=native --copt=-march=native \
</span><span class="line">    //tensorflow_serving/model_servers:tensorflow_model_server</span></code></pre></td></tr></table></div></figure>
<p>选项<code>--incompatible_load_argument_is_label=false</code>是为了兼容bazel 0.9版的问题。</p>

<h3 id="section-1">打包编译时生成的中间对象文件生成静态库</h3>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ find -L bazel-out/k8-opt/ -name '*.o' | grep -v '/main\.o$\|\.grpc\.pb\.o$\|/curl/\|/grpc/\|/cloud/\|/hadoop/' | xargs -i ar qv libtensorflow_serving.a '{}'</span></code></pre></td></tr></table></div></figure>
<p>注意：</p>

<ul>
  <li>要把上一步编译生成部分不需要的对象文件剔除掉。
    <ul>
      <li>main函数</li>
      <li>curl, grpc, cloud, hadoop等不需要的模块</li>
      <li>编译环境中已经有的模块（比如ssl, protobuf, snappy等）也可以剔除掉，减小库的尺寸</li>
    </ul>
  </li>
  <li>ar是用选项<code>q</code>来添加对象文件，因为可能会有重名的对象文件。</li>
</ul>

<h2 id="section-2">训练并导出模型</h2>

<p>以MNIST softmax模型为例，训练模型并导出到目录<code>models</code>.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ python2 serving/tensorflow_serving/example/mnist_saved_model.py models</span></code></pre></td></tr></table></div></figure>

<h2 id="section-3">编写示例代码加载模型进行预测</h2>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
<span class="line-number">198</span>
<span class="line-number">199</span>
<span class="line-number">200</span>
<span class="line-number">201</span>
<span class="line-number">202</span>
<span class="line-number">203</span>
<span class="line-number">204</span>
<span class="line-number">205</span>
<span class="line-number">206</span>
<span class="line-number">207</span>
<span class="line-number">208</span>
<span class="line-number">209</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;fstream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class="line"><span class="cp">#include &quot;tensorflow_serving/core/availability_preserving_policy.h&quot;</span>
</span><span class="line"><span class="cp">#include &quot;tensorflow_serving/model_servers/platform_config_util.h&quot;</span>
</span><span class="line"><span class="cp">#include &quot;tensorflow_serving/model_servers/server_core.h&quot;</span>
</span><span class="line"><span class="cp">#include &quot;tensorflow_serving/servables/tensorflow/predict_impl.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">tensorflow</span><span class="o">::</span><span class="n">serving</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">DataSet</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">DataSet</span><span class="p">()</span>
</span><span class="line">    <span class="p">{}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="n">LoadDataFromDir</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">path</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">x_train_file</span> <span class="o">=</span> <span class="s">&quot;train-images-idx3-ubyte&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">y_train_file</span> <span class="o">=</span> <span class="s">&quot;train-labels-idx1-ubyte&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">x_test_file</span> <span class="o">=</span> <span class="s">&quot;t10k-images-idx3-ubyte&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">y_test_file</span> <span class="o">=</span> <span class="s">&quot;t10k-labels-idx1-ubyte&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="n">m_x_train</span> <span class="o">=</span> <span class="n">ExtractImages</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">x_train_file</span><span class="p">);</span>
</span><span class="line">        <span class="n">m_y_train</span> <span class="o">=</span> <span class="n">ExtractLabels</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">y_train_file</span><span class="p">);</span>
</span><span class="line">        <span class="n">m_x_test</span> <span class="o">=</span> <span class="n">ExtractImages</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">x_test_file</span><span class="p">);</span>
</span><span class="line">        <span class="n">m_y_test</span> <span class="o">=</span> <span class="n">ExtractLabels</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">y_test_file</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;&amp;</span> <span class="n">x_train</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">m_x_train</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">y_train</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">m_y_train</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;&amp;</span> <span class="n">x_test</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">m_x_test</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">y_test</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">m_y_test</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line">    <span class="kt">uint32_t</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">ifstream</span><span class="o">&amp;</span> <span class="n">is</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">auto</span> <span class="n">read_count</span> <span class="o">=</span> <span class="n">is</span><span class="p">.</span><span class="n">readsome</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">),</span> <span class="mi">4</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">read_count</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;can&#39;t read 4 bytes&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">uint8_t</span> <span class="n">ReadUint8</span><span class="p">(</span><span class="n">ifstream</span><span class="o">&amp;</span> <span class="n">is</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">uint8_t</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">auto</span> <span class="n">read_count</span> <span class="o">=</span> <span class="n">is</span><span class="p">.</span><span class="n">readsome</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">read_count</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;can&#39;t read 1 byte&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">data</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">ExtractImages</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">file</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">ifstream</span> <span class="n">is</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">is</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;can&#39;t open file: &quot;</span> <span class="o">+</span> <span class="n">file</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">magic</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">magic</span> <span class="o">!=</span> <span class="mi">2051</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;bad magic: &quot;</span> <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">magic</span><span class="p">));</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">num</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">images</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">*</span><span class="n">rows</span><span class="o">*</span><span class="n">cols</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="kt">uint8_t</span> <span class="n">byte</span> <span class="o">=</span> <span class="n">ReadUint8</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">            <span class="n">images</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">byte</span><span class="p">)</span><span class="o">/</span><span class="mf">255.0</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">images</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ExtractLabels</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">file</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">ifstream</span> <span class="n">is</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">is</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;can&#39;t open file: &quot;</span> <span class="o">+</span> <span class="n">file</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">magic</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">magic</span> <span class="o">!=</span> <span class="mi">2049</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;bad magic: &quot;</span> <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">magic</span><span class="p">));</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">num</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">labels</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="kt">uint8_t</span> <span class="n">byte</span> <span class="o">=</span> <span class="n">ReadUint8</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">            <span class="n">labels</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">byte</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">labels</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">m_x_train</span><span class="p">;</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">m_y_train</span><span class="p">;</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">m_x_test</span><span class="p">;</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">m_y_test</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">GetPredictValue</span><span class="p">(</span><span class="k">const</span> <span class="n">PredictResponse</span><span class="o">&amp;</span> <span class="n">resp</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">predicted</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">p</span> <span class="p">:</span> <span class="n">resp</span><span class="p">.</span><span class="n">outputs</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">first</span> <span class="o">==</span> <span class="s">&quot;scores&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="kt">float</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">            <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">float_val_size</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">float_val</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="n">max</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">float_val</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class="line">                    <span class="n">predicted</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">predicted</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">// 加载测试数据。</span>
</span><span class="line">    <span class="n">DataSet</span> <span class="n">data_set</span><span class="p">;</span>
</span><span class="line">    <span class="n">data_set</span><span class="p">.</span><span class="n">LoadDataFromDir</span><span class="p">(</span><span class="s">&quot;mnist_data&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 设置Serving选项。</span>
</span><span class="line">    <span class="n">ServerCore</span><span class="o">::</span><span class="n">Options</span> <span class="n">options</span><span class="p">;</span>
</span><span class="line">    <span class="k">auto</span> <span class="n">config</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="n">model_server_config</span><span class="p">.</span><span class="n">mutable_model_config_list</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">add_config</span><span class="p">();</span>
</span><span class="line">    <span class="c1">// 设置模型名称，请求模型预测时必须与此一致，见下面。</span>
</span><span class="line">    <span class="n">config</span><span class="o">-&gt;</span><span class="n">set_name</span><span class="p">(</span><span class="s">&quot;mnist&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 设置模型的路径。注意：必须是绝对路径。</span>
</span><span class="line">    <span class="n">config</span><span class="o">-&gt;</span><span class="n">set_base_path</span><span class="p">(</span><span class="s">&quot;/home/qspace/data/spockwang/models&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// 设置模型平台。对Tensorflow训练的模型来讲必须是&quot;tensorflow&quot;.</span>
</span><span class="line">    <span class="n">config</span><span class="o">-&gt;</span><span class="n">set_model_platform</span><span class="p">(</span><span class="s">&quot;tensorflow&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">options</span><span class="p">.</span><span class="n">aspired_version_policy</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">AspiredVersionPolicy</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">AvailabilityPreservingPolicy</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 运行平台配置。</span>
</span><span class="line">    <span class="n">SessionBundleConfig</span> <span class="n">session_bundle_config</span><span class="p">;</span>
</span><span class="line">    <span class="n">session_bundle_config</span><span class="p">.</span><span class="n">mutable_session_config</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">set_intra_op_parallelism_threads</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="n">session_bundle_config</span><span class="p">.</span><span class="n">mutable_session_config</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">set_inter_op_parallelism_threads</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">options</span><span class="p">.</span><span class="n">platform_config_map</span> <span class="o">=</span> <span class="n">CreateTensorFlowPlatformConfigMap</span><span class="p">(</span><span class="n">session_bundle_config</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">ServerCore</span><span class="o">&gt;</span> <span class="n">core</span><span class="p">;</span>
</span><span class="line">    <span class="k">auto</span> <span class="n">status</span> <span class="o">=</span> <span class="n">ServerCore</span><span class="o">::</span><span class="n">Create</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">options</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">core</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">status</span><span class="p">.</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;error: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">status</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">TensorflowPredictor</span><span class="o">&gt;</span> <span class="n">predictor</span><span class="p">(</span><span class="k">new</span> <span class="n">TensorflowPredictor</span><span class="p">(</span><span class="nb">true</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 遍历测试数据进行预测，然后计算预测精度。</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">total_cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">success_cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">data_set</span><span class="p">.</span><span class="n">x_test</span><span class="p">().</span><span class="n">size</span><span class="p">()</span><span class="o">/</span><span class="mi">784</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;#&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;/&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">data_set</span><span class="p">.</span><span class="n">x_test</span><span class="p">().</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">784</span><span class="o">*</span><span class="n">i</span><span class="p">,</span>
</span><span class="line">                                          <span class="n">data_set</span><span class="p">.</span><span class="n">x_test</span><span class="p">().</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">784</span><span class="o">*</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">data_set</span><span class="p">.</span><span class="n">y_test</span><span class="p">()[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">        <span class="n">PredictRequest</span> <span class="n">req</span><span class="p">;</span>
</span><span class="line">        <span class="k">auto</span> <span class="n">model_spec</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="n">mutable_model_spec</span><span class="p">();</span>
</span><span class="line">        <span class="c1">// 与加载模型时设置的名字保持一致，见上面。</span>
</span><span class="line">        <span class="n">model_spec</span><span class="o">-&gt;</span><span class="n">set_name</span><span class="p">(</span><span class="s">&quot;mnist&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="c1">// 与保存模型时设置的签名保持一致，见mnist_saved_model.py</span>
</span><span class="line">        <span class="n">model_spec</span><span class="o">-&gt;</span><span class="n">set_signature_name</span><span class="p">(</span><span class="s">&quot;predict_images&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 构造输入特征。</span>
</span><span class="line">        <span class="k">auto</span> <span class="n">inputs</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="n">mutable_inputs</span><span class="p">();</span>
</span><span class="line">        <span class="k">auto</span><span class="o">&amp;</span> <span class="n">tensor</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">inputs</span><span class="p">)[</span><span class="s">&quot;images&quot;</span><span class="p">];</span>
</span><span class="line">        <span class="n">tensor</span><span class="p">.</span><span class="n">set_dtype</span><span class="p">(</span><span class="n">tensorflow</span><span class="o">::</span><span class="n">DataType</span><span class="o">::</span><span class="n">DT_FLOAT</span><span class="p">);</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">i</span> <span class="p">:</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">tensor</span><span class="p">.</span><span class="n">add_float_val</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">tensor</span><span class="p">.</span><span class="n">mutable_tensor_shape</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">add_dim</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">set_size</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="n">tensor</span><span class="p">.</span><span class="n">mutable_tensor_shape</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">add_dim</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">set_size</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 计算预测输出。</span>
</span><span class="line">        <span class="n">PredictResponse</span> <span class="n">resp</span><span class="p">;</span>
</span><span class="line">        <span class="k">auto</span> <span class="n">status</span> <span class="o">=</span> <span class="n">predictor</span><span class="o">-&gt;</span><span class="n">Predict</span><span class="p">(</span><span class="n">tensorflow</span><span class="o">::</span><span class="n">RunOptions</span><span class="p">(),</span> <span class="n">core</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">req</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">resp</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">status</span><span class="p">.</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">            <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">status</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="o">++</span><span class="n">total_cnt</span><span class="p">;</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">predicted</span> <span class="o">=</span> <span class="n">GetPredictValue</span><span class="p">(</span><span class="n">resp</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="n">predicted</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="o">++</span><span class="n">success_cnt</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">double</span> <span class="n">accuracy</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">success_cnt</span><span class="p">)</span><span class="o">/</span><span class="n">total_cnt</span><span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Accuracy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">accuracy</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>编译代码：</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="err">$</span> <span class="n">g</span><span class="o">++</span> <span class="o">-</span><span class="n">o</span> <span class="n">mnist_serving</span> <span class="n">mnist_serving</span><span class="p">.</span><span class="n">cpp</span> <span class="o">-</span><span class="n">Wl</span><span class="p">,</span><span class="o">-</span><span class="n">whole</span><span class="o">-</span><span class="n">archive</span> <span class="n">libtensorflow_serving</span><span class="p">.</span><span class="n">a</span> <span class="o">-</span><span class="n">Wl</span><span class="p">,</span><span class="o">-</span><span class="n">no</span><span class="o">-</span><span class="n">whole</span><span class="o">-</span><span class="n">archive</span> <span class="o">-</span><span class="n">I</span> <span class="n">serving</span> <span class="o">-</span><span class="n">I</span> <span class="n">serving</span><span class="o">/</span><span class="n">tensorflow</span> <span class="o">-</span><span class="n">I</span> <span class="n">serving</span><span class="o">/</span><span class="n">bazel</span><span class="o">-</span><span class="n">out</span><span class="o">/</span><span class="n">k8</span><span class="o">-</span><span class="n">opt</span><span class="o">/</span><span class="n">genfiles</span><span class="o">/</span><span class="n">external</span><span class="o">/</span><span class="n">org_tensorflow</span><span class="o">/</span> <span class="o">-</span><span class="n">I</span> <span class="n">serving</span><span class="o">/</span><span class="n">bazel</span><span class="o">-</span><span class="n">serving</span><span class="o">/</span><span class="n">external</span><span class="o">/</span><span class="n">nsync</span><span class="o">/</span><span class="k">public</span><span class="o">/</span> <span class="o">-</span><span class="n">I</span> <span class="n">serving</span><span class="o">/</span><span class="n">bazel</span><span class="o">-</span><span class="n">serving</span><span class="o">/</span><span class="n">external</span><span class="o">/</span><span class="n">protobuf_archive</span><span class="o">/</span><span class="n">src</span><span class="o">/</span> <span class="o">-</span><span class="n">I</span> <span class="n">serving</span><span class="o">/</span><span class="n">bazel</span><span class="o">-</span><span class="n">out</span><span class="o">/</span><span class="n">k8</span><span class="o">-</span><span class="n">opt</span><span class="o">/</span><span class="n">genfiles</span><span class="o">/</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="n">ldl</span> <span class="o">-</span><span class="n">lpthread</span>
</span></code></pre></td></tr></table></div></figure>
<p>注意：由于Tensorflow采用注册机制来实现反射，所以必须使用链接选项<code>-whole-archive</code>强制链接整个静态库。</p>

<p>下载MNIST数据到目录<code>mnist_data</code>并解压，然后运行查看预测结果。</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="err">$</span> <span class="n">ls</span> <span class="n">mnist_data</span>
</span><span class="line"><span class="n">t10k</span><span class="o">-</span><span class="n">images</span><span class="o">-</span><span class="n">idx3</span><span class="o">-</span><span class="n">ubyte</span>  <span class="n">t10k</span><span class="o">-</span><span class="n">labels</span><span class="o">-</span><span class="n">idx1</span><span class="o">-</span><span class="n">ubyte</span>  <span class="n">train</span><span class="o">-</span><span class="n">images</span><span class="o">-</span><span class="n">idx3</span><span class="o">-</span><span class="n">ubyte</span>  <span class="n">train</span><span class="o">-</span><span class="n">labels</span><span class="o">-</span><span class="n">idx1</span><span class="o">-</span><span class="n">ubyte</span>
</span><span class="line"><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">mnist_serving</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="nl">Accuracy</span><span class="p">:</span> <span class="mf">0.9092</span>
</span><span class="line"><span class="mi">2018</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mo">07</span> <span class="mi">11</span><span class="o">:</span><span class="mi">49</span><span class="o">:</span><span class="mf">34.222079</span><span class="o">:</span> <span class="n">I</span> <span class="n">tensorflow_serving</span><span class="o">/</span><span class="n">core</span><span class="o">/</span><span class="n">basic_manager</span><span class="p">.</span><span class="nl">cc</span><span class="p">:</span><span class="mi">253</span><span class="p">]</span> <span class="n">Unload</span> <span class="n">all</span> <span class="n">remaining</span> <span class="n">servables</span> <span class="n">in</span> <span class="n">the</span> <span class="n">manager</span><span class="p">.</span>
</span><span class="line"><span class="mi">2018</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mo">07</span> <span class="mi">11</span><span class="o">:</span><span class="mi">49</span><span class="o">:</span><span class="mf">34.222122</span><span class="o">:</span> <span class="n">I</span> <span class="n">tensorflow_serving</span><span class="o">/</span><span class="n">core</span><span class="o">/</span><span class="n">loader_harness</span><span class="p">.</span><span class="nl">cc</span><span class="p">:</span><span class="mi">137</span><span class="p">]</span> <span class="n">Quiescing</span> <span class="n">servable</span> <span class="n">version</span> <span class="p">{</span><span class="nl">name</span><span class="p">:</span> <span class="n">mnist</span> <span class="nl">version</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class="line"><span class="mi">2018</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mo">07</span> <span class="mi">11</span><span class="o">:</span><span class="mi">49</span><span class="o">:</span><span class="mf">34.222135</span><span class="o">:</span> <span class="n">I</span> <span class="n">tensorflow_serving</span><span class="o">/</span><span class="n">core</span><span class="o">/</span><span class="n">loader_harness</span><span class="p">.</span><span class="nl">cc</span><span class="p">:</span><span class="mi">144</span><span class="p">]</span> <span class="n">Done</span> <span class="n">quiescing</span> <span class="n">servable</span> <span class="n">version</span> <span class="p">{</span><span class="nl">name</span><span class="p">:</span> <span class="n">mnist</span> <span class="nl">version</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class="line"><span class="mi">2018</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mo">07</span> <span class="mi">11</span><span class="o">:</span><span class="mi">49</span><span class="o">:</span><span class="mf">34.222147</span><span class="o">:</span> <span class="n">I</span> <span class="n">tensorflow_serving</span><span class="o">/</span><span class="n">core</span><span class="o">/</span><span class="n">loader_harness</span><span class="p">.</span><span class="nl">cc</span><span class="p">:</span><span class="mi">119</span><span class="p">]</span> <span class="n">Unloading</span> <span class="n">servable</span> <span class="n">version</span> <span class="p">{</span><span class="nl">name</span><span class="p">:</span> <span class="n">mnist</span> <span class="nl">version</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class="line"><span class="mi">2018</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mo">07</span> <span class="mi">11</span><span class="o">:</span><span class="mi">49</span><span class="o">:</span><span class="mf">34.223047</span><span class="o">:</span> <span class="n">I</span> <span class="p">.</span><span class="o">/</span><span class="n">tensorflow_serving</span><span class="o">/</span><span class="n">core</span><span class="o">/</span><span class="n">simple_loader</span><span class="p">.</span><span class="nl">h</span><span class="p">:</span><span class="mi">294</span><span class="p">]</span> <span class="n">Calling</span> <span class="n">MallocExtension_ReleaseToSystem</span><span class="p">()</span> <span class="n">after</span> <span class="n">servable</span> <span class="n">unload</span> <span class="n">with</span> <span class="mi">61522</span>
</span><span class="line"><span class="mi">2018</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mo">07</span> <span class="mi">11</span><span class="o">:</span><span class="mi">49</span><span class="o">:</span><span class="mf">34.223068</span><span class="o">:</span> <span class="n">I</span> <span class="n">tensorflow_serving</span><span class="o">/</span><span class="n">core</span><span class="o">/</span><span class="n">loader_harness</span><span class="p">.</span><span class="nl">cc</span><span class="p">:</span><span class="mi">127</span><span class="p">]</span> <span class="n">Done</span> <span class="n">unloading</span> <span class="n">servable</span> <span class="n">version</span> <span class="p">{</span><span class="nl">name</span><span class="p">:</span> <span class="n">mnist</span> <span class="nl">version</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Tensorflow C++ API训练模型]]></title>
    <link href="http://spockwangs.github.io/blog/2018/01/13/train-using-tensorflow-c-plus-plus-api/"/>
    <updated>2018-01-13T21:14:48+08:00</updated>
    <id>http://spockwangs.github.io/blog/2018/01/13/train-using-tensorflow-c-plus-plus-api</id>
    <content type="html"><![CDATA[<p>用Tensorflow解决机器学习的问题时通常是用Python API构造模型并训练模型参数，然后将模型序列化到文件中。部署到线上时使用C++ API加载模型对输入进行预测。Tensorflow还专门提供了Serving模块来优化线上部署，除了进行预测外还提供了对模型的版本管理和模型热更新。但是为了更快地训练模型，缩短模型更新周期，就必须支持线上实时训练，也就是说必须支持用C++ API训练模型。但是C++ API目前还不完善，还不方便构造模型，所以仍然使用Python API构造模型，并导出给C++ API加载训练。</p>

<p>本文给出两种方法来编译C++库，一种是共享库，一种是静态库。
<!--more--></p>

<h2 id="section">准备</h2>

<ol>
  <li>安装Bazel</li>
  <li>安装Tensorflow for Python.</li>
  <li>
    <p>下载Tensorflow源代码</p>

    <p><code>
$ git clone https://github.com/tensorflow/tensorflow.git
</code></p>
  </li>
  <li>用Python API构造模型，我们以MNIST的softmax回归模型为例，代码如下：</li>
</ol>

<figure class="code"><figcaption><span>create_model.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="kn">as</span> <span class="nn">tf</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">getopt</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">exceptions</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">traceback</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Usage</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">msg</span> <span class="o">=</span> <span class="n">msg</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">usage</span><span class="p">(</span><span class="n">progname</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&#39;&#39;&#39;Usage:</span>
</span><span class="line"><span class="s">    {progname} [-h | --help] --export_dir &lt;dir&gt; [--as_text]&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">progname</span><span class="o">=</span><span class="n">progname</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">argv</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">        <span class="n">argv</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="k">try</span><span class="p">:</span>
</span><span class="line">            <span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="o">.</span><span class="n">getopt</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">&quot;h&quot;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;help&#39;</span><span class="p">,</span> <span class="s">&#39;export_dir=&#39;</span><span class="p">,</span> <span class="s">&#39;as_text&#39;</span> <span class="p">])</span>
</span><span class="line">        <span class="k">except</span> <span class="n">getopt</span><span class="o">.</span><span class="n">error</span> <span class="k">as</span> <span class="n">msg</span><span class="p">:</span>
</span><span class="line">            <span class="k">raise</span> <span class="n">Usage</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">global</span> <span class="n">g_debug_mode</span>
</span><span class="line">        <span class="n">export_dir</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class="line">        <span class="n">as_text</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">        <span class="k">for</span> <span class="n">o</span><span class="p">,</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">o</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;-h&#39;</span><span class="p">,</span> <span class="s">&#39;--help&#39;</span><span class="p">):</span>
</span><span class="line">                <span class="n">usage</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">                <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">            <span class="k">elif</span> <span class="n">o</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;-d&#39;</span><span class="p">):</span>
</span><span class="line">                <span class="n">g_debug_mode</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">            <span class="k">elif</span> <span class="n">o</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;--export_dir&#39;</span><span class="p">):</span>
</span><span class="line">                <span class="n">export_dir</span> <span class="o">=</span> <span class="n">a</span>
</span><span class="line">            <span class="k">elif</span> <span class="n">o</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;--as_text&#39;</span><span class="p">):</span>
</span><span class="line">                <span class="n">as_text</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">raise</span> <span class="n">Usage</span><span class="p">(</span><span class="s">&#39;Bad option: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">o</span><span class="p">))</span>
</span><span class="line">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">export_dir</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="k">raise</span> <span class="n">Usage</span><span class="p">(</span><span class="s">&#39;Bad value for option --export_dir&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="c"># Create the model</span>
</span><span class="line">        <span class="n">x</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">,</span> <span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="mi">784</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;x&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">W</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="mi">784</span><span class="p">,</span> <span class="mi">10</span><span class="p">]))</span>
</span><span class="line">        <span class="n">b</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="mi">10</span><span class="p">]))</span>
</span><span class="line">        <span class="n">y</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">W</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span>
</span><span class="line">
</span><span class="line">        <span class="c"># Define loss and optimizer</span>
</span><span class="line">        <span class="n">y_</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[</span><span class="bp">None</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;y_&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">cross_entropy</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">losses</span><span class="o">.</span><span class="n">sparse_softmax_cross_entropy</span><span class="p">(</span><span class="n">labels</span><span class="o">=</span><span class="n">y_</span><span class="p">,</span> <span class="n">logits</span><span class="o">=</span><span class="n">y</span><span class="p">)</span>
</span><span class="line">        <span class="n">train_step</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">GradientDescentOptimizer</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span><span class="o">.</span><span class="n">minimize</span><span class="p">(</span><span class="n">cross_entropy</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;train_step&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="c"># Test trained model</span>
</span><span class="line">        <span class="n">correct_prediction</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">equal</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">tf</span><span class="o">.</span><span class="n">cast</span><span class="p">(</span><span class="n">y_</span><span class="p">,</span> <span class="n">tf</span><span class="o">.</span><span class="n">int64</span><span class="p">))</span>
</span><span class="line">        <span class="n">accuracy</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">reduce_mean</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">cast</span><span class="p">(</span><span class="n">correct_prediction</span><span class="p">,</span> <span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;accuracy&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="c"># Export the computation graph.</span>
</span><span class="line">        <span class="n">tf</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">write_graph</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">get_default_graph</span><span class="p">()</span><span class="o">.</span><span class="n">as_graph_def</span><span class="p">(),</span> <span class="n">export_dir</span><span class="p">,</span> <span class="s">&#39;mnist_graph.pb&#39;</span><span class="p">,</span> <span class="n">as_text</span><span class="o">=</span><span class="n">as_text</span><span class="p">)</span>
</span><span class="line">    <span class="k">except</span> <span class="n">Usage</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="n">err</span><span class="o">.</span><span class="n">msg</span><span class="p">)</span>
</span><span class="line">        <span class="n">usage</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class="line">        <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">()</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<p>创建模型并导出到目录models.</p>
<figure class="code"><figcaption><span>create_model.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">create_model</span><span class="o">.</span><span class="n">py</span> <span class="o">--</span><span class="n">export_dir</span><span class="o">=</span><span class="n">models</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="section-1">第一种方法：编译共享库</h2>

<p>首先编译Tensorflow的C++共享库<code>libtensorflow_cc.so</code>.</p>
<figure class="code"><figcaption><span>create_model.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">cd</span> <span class="n">tensorflow</span>              <span class="c"># 进入tensorflow源代码目录</span>
</span><span class="line"><span class="err">$</span> <span class="o">./</span><span class="n">configure</span>
</span><span class="line"><span class="err">$</span> <span class="n">bazel</span> <span class="n">build</span> <span class="o">--</span><span class="n">config</span><span class="o">=</span><span class="n">opt</span> <span class="o">//</span><span class="n">tensorflow</span><span class="p">:</span><span class="n">libtensorflow_cc</span><span class="o">.</span><span class="n">so</span>
</span></code></pre></td></tr></table></div></figure>

<p>下载并编译Tensorflow依赖的外部库。</p>
<figure class="code"><figcaption><span>create_model.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">cd</span> <span class="n">tensorflow</span><span class="o">/</span><span class="n">contrib</span><span class="o">/</span><span class="n">makefile</span>
</span><span class="line"><span class="err">$</span> <span class="o">./</span><span class="n">build_all_linux</span><span class="o">.</span><span class="n">sh</span>
</span></code></pre></td></tr></table></div></figure>

<p>安装头文件和共享库。</p>
<figure class="code"><figcaption><span>create_model.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">cp</span> <span class="n">tensorflow</span>
</span><span class="line"><span class="err">$</span> <span class="n">find</span> <span class="n">tensorflow</span><span class="o">/</span><span class="n">core</span> <span class="o">-</span><span class="n">name</span> <span class="s">&#39;*.h&#39;</span> <span class="o">|</span> <span class="n">xargs</span> <span class="o">-</span><span class="n">i</span> <span class="n">cp</span> <span class="o">--</span><span class="n">parents</span> <span class="s">&#39;{}&#39;</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">tf</span>
</span><span class="line"><span class="err">$</span> <span class="n">cp</span> <span class="o">-</span><span class="n">r</span> <span class="n">bazel</span><span class="o">-</span><span class="n">genfiles</span><span class="o">/*</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">tf</span>
</span><span class="line"><span class="err">$</span> <span class="n">cp</span> <span class="o">-</span><span class="n">r</span> <span class="n">tensorflow</span><span class="o">/</span><span class="n">contrib</span><span class="o">/</span><span class="n">makefile</span><span class="o">/</span><span class="n">gen</span><span class="o">/</span><span class="n">protobuf</span><span class="o">/</span><span class="n">include</span><span class="o">/*</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">tf</span>
</span><span class="line"><span class="err">$</span> <span class="n">cp</span> <span class="o">-</span><span class="n">r</span> <span class="n">tensorflow</span><span class="o">/</span><span class="n">contrib</span><span class="o">/</span><span class="n">makefile</span><span class="o">/</span><span class="n">downloads</span><span class="o">/</span><span class="n">eigen</span><span class="o">/*</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">tf</span>
</span><span class="line"><span class="err">$</span> <span class="n">cp</span> <span class="o">-</span><span class="n">r</span> <span class="n">tensorflow</span><span class="o">/</span><span class="n">contrib</span><span class="o">/</span><span class="n">makefile</span><span class="o">/</span><span class="n">downloads</span><span class="o">/</span><span class="n">nsync</span><span class="o">/</span><span class="n">public</span><span class="o">/*</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">tf</span>
</span><span class="line"><span class="err">$</span> <span class="n">cp</span> <span class="o">-</span><span class="n">r</span> <span class="n">third_party</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">tf</span>
</span><span class="line"><span class="err">$</span> <span class="n">cp</span> <span class="n">tensorflow</span><span class="o">/</span><span class="n">bazel</span><span class="o">-</span><span class="nb">bin</span><span class="o">/</span><span class="n">tensorflow</span><span class="o">/</span><span class="n">libtensorflow_cc</span><span class="o">.</span><span class="n">so</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">lib</span>
</span><span class="line"><span class="err">$</span> <span class="n">cp</span> <span class="n">tensorflow</span><span class="o">/</span><span class="n">bazel</span><span class="o">-</span><span class="nb">bin</span><span class="o">/</span><span class="n">tensorflow</span><span class="o">/</span><span class="n">libtensorflow_framework</span><span class="o">.</span><span class="n">so</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">lib</span>
</span></code></pre></td></tr></table></div></figure>

<p>我们的C++训练代码如下。</p>
<figure class="code"><figcaption><span>train_model.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string&gt;</span>
</span><span class="line"><span class="cp">#include &lt;vector&gt;</span>
</span><span class="line"><span class="cp">#include &lt;fstream&gt;</span>
</span><span class="line"><span class="cp">#include &quot;tensorflow/core/public/session.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">DataSet</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">DataSet</span><span class="p">()</span>
</span><span class="line">    <span class="p">{}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="n">LoadDataFromDir</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">path</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">x_train_file</span> <span class="o">=</span> <span class="s">&quot;train-images-idx3-ubyte&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">y_train_file</span> <span class="o">=</span> <span class="s">&quot;train-labels-idx1-ubyte&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">x_test_file</span> <span class="o">=</span> <span class="s">&quot;t10k-images-idx3-ubyte&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">y_test_file</span> <span class="o">=</span> <span class="s">&quot;t10k-labels-idx1-ubyte&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="n">m_x_train</span> <span class="o">=</span> <span class="n">ExtractImages</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">x_train_file</span><span class="p">);</span>
</span><span class="line">        <span class="n">m_y_train</span> <span class="o">=</span> <span class="n">ExtractLabels</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">y_train_file</span><span class="p">);</span>
</span><span class="line">        <span class="n">m_x_test</span> <span class="o">=</span> <span class="n">ExtractImages</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">x_test_file</span><span class="p">);</span>
</span><span class="line">        <span class="n">m_y_test</span> <span class="o">=</span> <span class="n">ExtractLabels</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">y_test_file</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;&amp;</span> <span class="n">x_train</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">m_x_train</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">y_train</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">m_y_train</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;&amp;</span> <span class="n">x_test</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">m_x_test</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">y_test</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">m_y_test</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line">    <span class="kt">uint32_t</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">ifstream</span><span class="o">&amp;</span> <span class="n">is</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">is</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">),</span> <span class="mi">4</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;can&#39;t read 4 bytes&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">uint8_t</span> <span class="n">ReadUint8</span><span class="p">(</span><span class="n">ifstream</span><span class="o">&amp;</span> <span class="n">is</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">uint8_t</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">is</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">),</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">data</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;can&#39;t read 1 byte&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">ExtractImages</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">file</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">ifstream</span> <span class="n">is</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">is</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;can&#39;t open file: &quot;</span> <span class="o">+</span> <span class="n">file</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">magic</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">magic</span> <span class="o">!=</span> <span class="mi">2051</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;bad magic: &quot;</span> <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">magic</span><span class="p">));</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">num</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">images</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">*</span><span class="n">rows</span><span class="o">*</span><span class="n">cols</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="kt">uint8_t</span> <span class="n">byte</span> <span class="o">=</span> <span class="n">ReadUint8</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">            <span class="n">images</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">byte</span><span class="p">)</span><span class="o">/</span><span class="mf">255.0</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">images</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ExtractLabels</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">file</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">ifstream</span> <span class="n">is</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">is</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;can&#39;t open file: &quot;</span> <span class="o">+</span> <span class="n">file</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">magic</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">magic</span> <span class="o">!=</span> <span class="mi">2049</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="n">logic_error</span><span class="p">(</span><span class="s">&quot;bad magic: &quot;</span> <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">magic</span><span class="p">));</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="kt">uint32_t</span> <span class="n">num</span> <span class="o">=</span> <span class="n">ReadUint32</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">labels</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="kt">uint8_t</span> <span class="n">byte</span> <span class="o">=</span> <span class="n">ReadUint8</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
</span><span class="line">            <span class="n">labels</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">byte</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">labels</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">m_x_train</span><span class="p">;</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">m_y_train</span><span class="p">;</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">m_x_test</span><span class="p">;</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">m_y_test</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">tensorflow</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">try</span> <span class="p">{</span>
</span><span class="line">        <span class="n">string</span> <span class="n">data_dir</span> <span class="o">=</span> <span class="s">&quot;mnist_data&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">data_dir</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">DataSet</span> <span class="n">data_set</span><span class="p">;</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;loading data from &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">data_dir</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; ... &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="n">data_set</span><span class="p">.</span><span class="n">LoadDataFromDir</span><span class="p">(</span><span class="n">data_dir</span><span class="p">);</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;loading data ... done.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Initialize a tensorflow session</span>
</span><span class="line">        <span class="n">Session</span><span class="o">*</span> <span class="n">session</span><span class="p">;</span>
</span><span class="line">        <span class="n">TF_CHECK_OK</span><span class="p">(</span><span class="n">NewSession</span><span class="p">(</span><span class="n">SessionOptions</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">session</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Read in the protobuf graph we exported</span>
</span><span class="line">        <span class="c1">// (The path seems to be relative to the cwd. Keep this in mind</span>
</span><span class="line">        <span class="c1">// when using `bazel run` since the cwd isn&#39;t where you call</span>
</span><span class="line">        <span class="c1">// `bazel run` but from inside a temp folder.)</span>
</span><span class="line">        <span class="n">GraphDef</span> <span class="n">graph_def</span><span class="p">;</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">graph_path</span> <span class="o">=</span> <span class="s">&quot;mnist_graph.pb&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">graph_path</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;reading graph from &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">graph_path</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; ... &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="n">TF_CHECK_OK</span><span class="p">(</span><span class="n">ReadBinaryProto</span><span class="p">(</span><span class="n">Env</span><span class="o">::</span><span class="n">Default</span><span class="p">(),</span> <span class="n">graph_path</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">graph_def</span><span class="p">));</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;reading graph ... done.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Add the graph to the session</span>
</span><span class="line">        <span class="n">TF_CHECK_OK</span><span class="p">(</span><span class="n">session</span><span class="o">-&gt;</span><span class="n">Create</span><span class="p">(</span><span class="n">graph_def</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Setup inputs and outputs:</span>
</span><span class="line">        <span class="n">Tensor</span> <span class="n">x_train</span><span class="p">(</span><span class="n">DataTypeToEnum</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;::</span><span class="n">v</span><span class="p">(),</span>
</span><span class="line">                       <span class="n">TensorShape</span><span class="p">{</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">data_set</span><span class="p">.</span><span class="n">x_train</span><span class="p">().</span><span class="n">size</span><span class="p">())</span><span class="o">/</span><span class="mi">784</span><span class="p">,</span> <span class="mi">784</span><span class="p">});</span>
</span><span class="line">        <span class="n">copy_n</span><span class="p">(</span><span class="n">data_set</span><span class="p">.</span><span class="n">x_train</span><span class="p">().</span><span class="n">begin</span><span class="p">(),</span> <span class="n">data_set</span><span class="p">.</span><span class="n">x_train</span><span class="p">().</span><span class="n">size</span><span class="p">(),</span> <span class="n">x_train</span><span class="p">.</span><span class="n">flat</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">().</span><span class="n">data</span><span class="p">());</span>
</span><span class="line">
</span><span class="line">        <span class="n">Tensor</span> <span class="n">y_train</span><span class="p">(</span><span class="n">DataTypeToEnum</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">v</span><span class="p">(),</span>
</span><span class="line">                       <span class="n">TensorShape</span><span class="p">{</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">data_set</span><span class="p">.</span><span class="n">y_train</span><span class="p">().</span><span class="n">size</span><span class="p">())});</span>
</span><span class="line">        <span class="n">copy_n</span><span class="p">(</span><span class="n">data_set</span><span class="p">.</span><span class="n">y_train</span><span class="p">().</span><span class="n">begin</span><span class="p">(),</span> <span class="n">data_set</span><span class="p">.</span><span class="n">y_train</span><span class="p">().</span><span class="n">size</span><span class="p">(),</span> <span class="n">y_train</span><span class="p">.</span><span class="n">flat</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">().</span><span class="n">data</span><span class="p">());</span>
</span><span class="line">
</span><span class="line">        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="n">tensorflow</span><span class="o">::</span><span class="n">Tensor</span><span class="o">&gt;&gt;</span> <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">            <span class="p">{</span> <span class="s">&quot;x&quot;</span><span class="p">,</span> <span class="n">x_train</span> <span class="p">},</span>
</span><span class="line">            <span class="p">{</span> <span class="s">&quot;y_&quot;</span><span class="p">,</span> <span class="n">y_train</span> <span class="p">},</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;init global variables ... &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="n">TF_CHECK_OK</span><span class="p">(</span><span class="n">session</span><span class="o">-&gt;</span><span class="n">Run</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="p">{</span> <span class="p">},</span> <span class="p">{</span> <span class="s">&quot;init&quot;</span> <span class="p">},</span> <span class="k">nullptr</span><span class="p">));</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;init ... done.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;training ... &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">tensorflow</span><span class="o">::</span><span class="n">Tensor</span><span class="o">&gt;</span> <span class="n">outputs</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;step &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">TF_CHECK_OK</span><span class="p">(</span><span class="n">session</span><span class="o">-&gt;</span><span class="n">Run</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="p">{},</span> <span class="p">{</span> <span class="s">&quot;train_step&quot;</span> <span class="p">},</span> <span class="k">nullptr</span><span class="p">));</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;training ... done.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;testing ... &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="n">Tensor</span> <span class="n">x_test</span><span class="p">(</span><span class="n">DataTypeToEnum</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;::</span><span class="n">v</span><span class="p">(),</span>
</span><span class="line">                      <span class="n">TensorShape</span><span class="p">{</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">data_set</span><span class="p">.</span><span class="n">x_test</span><span class="p">().</span><span class="n">size</span><span class="p">())</span><span class="o">/</span><span class="mi">784</span><span class="p">,</span> <span class="mi">784</span><span class="p">});</span>
</span><span class="line">        <span class="n">copy_n</span><span class="p">(</span><span class="n">data_set</span><span class="p">.</span><span class="n">x_test</span><span class="p">().</span><span class="n">begin</span><span class="p">(),</span> <span class="n">data_set</span><span class="p">.</span><span class="n">x_test</span><span class="p">().</span><span class="n">size</span><span class="p">(),</span> <span class="n">x_test</span><span class="p">.</span><span class="n">flat</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">().</span><span class="n">data</span><span class="p">());</span>
</span><span class="line">
</span><span class="line">        <span class="n">Tensor</span> <span class="n">y_test</span><span class="p">(</span><span class="n">DataTypeToEnum</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">v</span><span class="p">(),</span>
</span><span class="line">                      <span class="n">TensorShape</span><span class="p">{</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">data_set</span><span class="p">.</span><span class="n">y_test</span><span class="p">().</span><span class="n">size</span><span class="p">())});</span>
</span><span class="line">        <span class="n">copy_n</span><span class="p">(</span><span class="n">data_set</span><span class="p">.</span><span class="n">y_test</span><span class="p">().</span><span class="n">begin</span><span class="p">(),</span> <span class="n">data_set</span><span class="p">.</span><span class="n">y_test</span><span class="p">().</span><span class="n">size</span><span class="p">(),</span> <span class="n">y_test</span><span class="p">.</span><span class="n">flat</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">().</span><span class="n">data</span><span class="p">());</span>
</span><span class="line">        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="n">tensorflow</span><span class="o">::</span><span class="n">Tensor</span><span class="o">&gt;&gt;</span> <span class="n">tests</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">            <span class="p">{</span> <span class="s">&quot;x&quot;</span><span class="p">,</span> <span class="n">x_test</span> <span class="p">},</span>
</span><span class="line">            <span class="p">{</span> <span class="s">&quot;y_&quot;</span><span class="p">,</span> <span class="n">y_test</span> <span class="p">}</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">
</span><span class="line">        <span class="n">TF_CHECK_OK</span><span class="p">(</span><span class="n">session</span><span class="o">-&gt;</span><span class="n">Run</span><span class="p">(</span><span class="n">tests</span><span class="p">,</span> <span class="p">{</span> <span class="s">&quot;accuracy&quot;</span> <span class="p">},</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">outputs</span><span class="p">));</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Accuracy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">scalar</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">().</span><span class="n">data</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;testing ... done.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Free any resources used by the session</span>
</span><span class="line">        <span class="n">session</span><span class="o">-&gt;</span><span class="n">Close</span><span class="p">();</span>
</span><span class="line">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>编译训练代码。</p>
<figure class="code"><figcaption><span>train_model.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="err">$</span> <span class="n">g</span><span class="o">++</span> <span class="n">train_model</span><span class="p">.</span><span class="n">cpp</span> <span class="o">-</span><span class="n">o</span> <span class="n">train_model</span> <span class="o">-</span><span class="n">I</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">tf</span> <span class="o">-</span><span class="n">ltensorflow_cc</span> <span class="o">-</span><span class="n">ltensorflow_framework</span>
</span></code></pre></td></tr></table></div></figure>

<p>下载<a href="http://yann.lecun.com/exdb/mnist/">MNIST数据</a>到目录mnist_data并解压，然后运行训练代码。</p>
<figure class="code"><figcaption><span>train_model.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="err">$</span> <span class="n">ls</span> <span class="n">mnist_data</span>
</span><span class="line"><span class="n">t10k</span><span class="o">-</span><span class="n">images</span><span class="o">-</span><span class="n">idx3</span><span class="o">-</span><span class="n">ubyte</span>
</span><span class="line"><span class="n">t10k</span><span class="o">-</span><span class="n">labels</span><span class="o">-</span><span class="n">idx1</span><span class="o">-</span><span class="n">ubyte</span>
</span><span class="line"><span class="n">train</span><span class="o">-</span><span class="n">images</span><span class="o">-</span><span class="n">idx3</span><span class="o">-</span><span class="n">ubyte</span>
</span><span class="line"><span class="n">train</span><span class="o">-</span><span class="n">labels</span><span class="o">-</span><span class="n">idx1</span><span class="o">-</span><span class="n">ubyte</span>
</span><span class="line"><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">train_model</span> <span class="n">mnist_data</span> <span class="n">models</span><span class="o">/</span><span class="n">mnist_graph</span><span class="p">.</span><span class="n">pb</span>
</span><span class="line"><span class="n">loading</span> <span class="n">data</span> <span class="n">from</span> <span class="n">mnist_data</span> <span class="p">...</span>
</span><span class="line"><span class="n">loading</span> <span class="n">data</span> <span class="p">...</span> <span class="n">done</span><span class="p">.</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="n">training</span> <span class="p">...</span> <span class="n">done</span><span class="p">.</span>
</span><span class="line"><span class="n">testing</span> <span class="p">...</span>
</span><span class="line"><span class="nl">Accuracy</span><span class="p">:</span> <span class="mf">0.9012</span>
</span><span class="line"><span class="n">testing</span> <span class="p">...</span> <span class="n">done</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="section-2">第二种方法：编译静态库</h2>

<figure class="code"><figcaption><span>train_model.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="err">$</span> <span class="n">cd</span> <span class="n">tensorflow</span><span class="o">/</span><span class="n">contrib</span><span class="o">/</span><span class="n">makefile</span>
</span><span class="line"><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">build_all_linux</span><span class="p">.</span><span class="n">sh</span>
</span></code></pre></td></tr></table></div></figure>

<p>它的原理是利用bazel获取Tensorflow依赖的文件，然后编译链接成静态库。编译的Tensorflow静态库在<code>gen/lib/libtensorflow-core.a</code>. 同样使用上述C++代码，编译训练代码。</p>
<figure class="code"><figcaption><span>train_model.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="err">$</span> <span class="n">cd</span> <span class="n">tensorflow</span><span class="o">/</span><span class="n">contrib</span><span class="o">/</span><span class="n">makefile</span>
</span><span class="line"><span class="err">$</span> <span class="n">g</span><span class="o">++</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="n">train_model</span><span class="p">.</span><span class="n">cpp</span> <span class="o">-</span><span class="n">o</span> <span class="n">train_model</span> \
</span><span class="line"><span class="o">-</span><span class="n">I</span> <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span> \
</span><span class="line"><span class="o">-</span><span class="n">I</span> <span class="n">downloads</span><span class="o">/</span> <span class="err">\</span>
</span><span class="line"><span class="o">-</span><span class="n">I</span> <span class="n">downloads</span><span class="o">/</span><span class="n">eigen</span><span class="o">/</span> \
</span><span class="line"><span class="o">-</span><span class="n">I</span> <span class="n">downloads</span><span class="o">/</span><span class="n">gemmlowp</span><span class="o">/</span> \
</span><span class="line"><span class="o">-</span><span class="n">I</span> <span class="n">downloads</span><span class="o">/</span><span class="n">nsync</span><span class="o">/</span><span class="k">public</span><span class="o">/</span> \
</span><span class="line"><span class="o">-</span><span class="n">I</span> <span class="n">downloads</span><span class="o">/</span><span class="n">fft2d</span><span class="o">/</span>
</span><span class="line"><span class="o">-</span><span class="n">I</span> <span class="n">gen</span><span class="o">/</span><span class="n">proto</span><span class="o">/</span>
</span><span class="line"><span class="o">-</span><span class="n">I</span> <span class="n">gen</span><span class="o">/</span><span class="n">proto_text</span><span class="o">/</span>
</span><span class="line"><span class="o">-</span><span class="n">I</span> <span class="n">gen</span><span class="o">/</span><span class="n">protobuf</span><span class="o">-</span><span class="n">host</span><span class="o">/</span><span class="n">include</span><span class="o">/</span> \
</span><span class="line"><span class="o">-</span><span class="n">Wl</span><span class="p">,</span><span class="o">--</span><span class="n">allow</span><span class="o">-</span><span class="n">multiple</span><span class="o">-</span><span class="n">definition</span> \
</span><span class="line"><span class="o">-</span><span class="n">Wl</span><span class="p">,</span><span class="o">--</span><span class="n">whole</span><span class="o">-</span><span class="n">archive</span> <span class="n">gen</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libtensorflow</span><span class="o">-</span><span class="n">core</span><span class="p">.</span><span class="n">a</span> <span class="o">-</span><span class="n">Wl</span><span class="p">,</span><span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">whole</span><span class="o">-</span><span class="n">archive</span> \
</span><span class="line"><span class="n">downloads</span><span class="o">/</span><span class="n">nsync</span><span class="o">/</span><span class="n">builds</span><span class="o">/</span><span class="k">default</span><span class="p">.</span><span class="n">linux</span><span class="p">.</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span><span class="o">/</span><span class="n">nsync</span><span class="p">.</span><span class="n">a</span> \
</span><span class="line"><span class="n">gen</span><span class="o">/</span><span class="n">protobuf</span><span class="o">-</span><span class="n">host</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libprotobuf</span><span class="p">.</span><span class="n">a</span> <span class="o">-</span><span class="n">lz</span> <span class="o">-</span><span class="n">lm</span> <span class="o">-</span><span class="n">ldl</span> <span class="o">-</span><span class="n">lpthread</span> <span class="o">-</span><span class="n">lstdc</span><span class="o">++</span>
</span></code></pre></td></tr></table></div></figure>

<p>运行模型：</p>
<figure class="code"><figcaption><span>train_model.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">train_model</span> <span class="n">mnist_data</span> <span class="n">models</span><span class="o">/</span><span class="n">mnist_graph</span><span class="p">.</span><span class="n">pb</span>
</span></code></pre></td></tr></table></div></figure>
<p>如果运行时报错说有些操作没有注册，这需要将相应的操作源代码文件（在<code>tensorflow/core/kernels/</code>下）放到<code>tf_op_files.txt</code>中重新编译。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式系统的分区管理]]></title>
    <link href="http://spockwangs.github.io/blog/2018/01/03/cluster-membership-protocol/"/>
    <updated>2018-01-03T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2018/01/03/cluster-membership-protocol</id>
    <content type="html"><![CDATA[<p>当数据量大到单机存不下时就需要分布式存储系统。分布式存储与单机存储最大的区别就是把数据按一定规则切分
为多个部分，每个机器只存储其中一部分，这样理论上来讲分布式存储可以应付无穷大的数据量。但是这里带来一
个新的问题，即如何找到我需要的数据是存储在哪台机器呢？这就是分布式系统的分区管理模块需要解决的问题，
除了这个问题外，还需要解决负载均衡和容灾的问题。</p>

<p>分区管理是有一定成本的，随机器数量增加而增加，所以分布式存储的伸缩性不是无穷的，伸缩能力主要取决于
分区管理。所以分区管理是分布式系统中相当重要的模块。</p>

<p>本文将介绍分区管理的一般解决思路，并介绍实际的分布式系统的解决方案，最后总结不同需求场景下应采用的
解决方案。
<!--more--></p>

<h2 id="section">分区管理应该解决的问题</h2>

<p>分区管理主要解决以下问题：</p>

<ol>
  <li>分区，如何将数据集且分为多个分区？</li>
  <li>路由
    <ol>
      <li>如何找到分区所在节点？</li>
      <li>如何保证路由信息的一致性？比如，如何解决客户端缓存的过期路由信息？如果读写请求因为过期的路由信息
由错误的节点处理，可能导致数据丢失。</li>
    </ol>
  </li>
  <li>容灾
    <ol>
      <li>如何检测节点的失败？</li>
      <li>节点失败多种多样，基本可分为两种情况：短暂的失败和长期失败。短暂的失败可能是由于临时过载处理不
及时导致的，长期失败可能是硬件故障导致的，短期无法恢复。针对这两种失败应采用不同的容灾策略。</li>
    </ol>
  </li>
</ol>

<h2 id="section-1">分区</h2>

<p>数据通常都有唯一标识，也就是key，所以我们可以根据key来切分数据，通常有以下的切分方案：</p>

<ul>
  <li>根据key的范围来划分
    <ul>
      <li>优点：可执行按范围查询</li>
      <li>缺点：可能分布不均匀，可以结合时间戳或者数据来源进一步分区来缓解</li>
    </ul>
  </li>
  <li>根据key的hash来划分
    <ul>
      <li>优点：hash可将不均匀的key转换为均匀的数字，所以分布是均匀的</li>
      <li>缺点：只能精确查找，无法按范围查询。不过可以设计聪明的hash算法来执行模糊匹配，比如GeoHash可用来
查询附近的地理位置。</li>
      <li>例子：一致性hash</li>
    </ul>
  </li>
</ul>

<h2 id="section-2">路由</h2>

<h3 id="section-3">路由策略</h3>

<p>路由要解决的问题是讲分区映射到节点上，通常需要考虑以下几个需求：</p>

<ol>
  <li>分区尽量均匀分布到节点上；</li>
  <li>在进行负载均衡操作时，分区仍然是可用的；</li>
  <li>负载均衡时移动的数据量尽量少.</li>
</ol>

<p>一种容易想到的映射方案是将分区hash对节点数量取模，这种分区方案严重依赖节点的数量。当节点数量变化时，所有
分区到节点的映射都要发生变化，不满足上述的第3点要求，所以不建议使用。</p>

<p>常见的路由策略有两种：</p>

<ol>
  <li>查表
    <ul>
      <li>分区到节点的映射存储在一张表里</li>
    </ul>
  </li>
  <li>伪随机算法
    <ul>
      <li>分区到节点的映射通过一个伪随机算法计算，如Ceph的CRUSH算法。</li>
      <li>优点：路由信息的空间复杂度只跟节点数量有关，存储空间小</li>
    </ul>
  </li>
</ol>

<h3 id="section-4">路由信息的一致性</h3>

<p>另一个问题是如何保证路由信息的一致性：如果读写请求由于过期的路由信息发送到错误的节点，轻则导致读到
错误的数据（比如请求的key不是由该节点负责，所以该节点返回找不到这个key，其实系统中是有这个key的），
重则导致数据写到错误的节点上，最终数据被丢弃。</p>

<p>权威的路由信息一定会存储在某些节点上，根据存储节点的不同可分为一些两种：</p>

<ol>
  <li>中心化路由
    <ul>
      <li>路由信息储存在某些特殊的节点上，他们构成路由层，专门转发客户端的路由请求.</li>
      <li>例如，GFS的路由信息存储在主节点上；BigTable的路由信息由Chubby服务来维护；MongoDB的客户端请求由
路由节点转发，其路由信息由一组配置服务器维护；Ceph的路由信息由一组Monitor节点维护，Monitor集群采
用Paxos协议保证路由信息的一致性和可靠性。</li>
    </ul>
  </li>
  <li>去中心化路由
    <ul>
      <li>每个节点都存储路由信息的一部分或全部，由所有节点共同维护，他们之间通过一种复制协议（比如Gossip
协议）来保证一致性，所有节点均可路由客户端请求。</li>
      <li>最典型的例子就是Dynamo，所有节点存储了完整的路由信息，通过Gossip协议保证路由信息的最终一致。
 Cassandra, CouchDB, Voldemort和Redis Cluster也采用了类似的方案。</li>
    </ul>
  </li>
</ol>

<p>采用去中心化路由的好处是更好的可用性，任何节点均可单独转发客户端请求。若采用中心化的方式，路由层若发生
故障将导致系统不可用，例如BigTable的可用性将直接受到Chubby的限制，而Dynamo就没有此问题，除非其所有节点
均不可用（BigTable的可用性不超过4个9，而Dynamo的可用性可达到5个9）。</p>

<p>不管采用哪种路由存储方式，均无法保证客户端路由信息与系统的完全一致。当客户端从系统获取到路由信息后到
访问数据这段时间，路由信息此时可能已经发生了变化（节点的状态随时可能变化）。为了容灾，数据的分布必须
随节点状态的变化而变化，不可能在客户端访问数据期间将路由信息锁定起来，因而不能严格保证客户端的路由信息
与系统完全一致。我们只要能保证在客户端的路由信息错误时能够纠正即可。一般采用如下两种方式来解决这个问题：</p>

<ul>
  <li>数据节点具有其自身负责的分区的权威信息。若客户端请求的key不由其负责，则返回路由错误给客户端，由其
重新刷新路由信息重试（如BigTable）；或者数据节点有完整的路由信息，直接将其请求转发给正确的节点
（如Dynamo）.</li>
  <li>数据节点与其它节点发生网络分区了，导致其负责的分区信息本身已经过时，而客户端的路由信息与其刚好一致，
此时数据节点无法判断客户端的路由错误。为了防止这种情况的发生，在新节点接管该节点的分区前必须保证旧节点
不再处理客户端的请求。例如，Ceph和BigTable都采用租约机制来保证旧节点一定不会处理客户端的请求。</li>
</ul>

<p>还有些系统本身是容忍部分数据丢失的，因而也没有机制保证客户端路由信息的一致性，比如Redis Cluster，当
客户端访问的数据节点与其它节点发生网络分区时（此时客户端和数据节点的路由信息都是旧的并可能相同）
会依然接受读写请求，直到它检测到了网络分区为止，这段时间写的数据将在主节点迁移后丢失。</p>

<h3 id="section-5">路由转发</h3>

<p>路由的转发直接影响到请求处理的延迟，转发次数过多会导致延迟过高，而且延迟也不稳定。转发方式可分为3种：</p>

<ol>
  <li>客户端直接转发
    <ul>
      <li>客户端可缓存或预取路由信息，此后将直接路由请求给正确的节点，可最大程度减少转发次数。即使路由信息
过期也可以通过系统的转发纠正。</li>
      <li>客户端逻辑会比较复杂，通常这部分逻辑会以客户端库的形式由系统提供，编译链接到应用程序。</li>
    </ul>
  </li>
  <li>路由层转发
    <ul>
      <li>如果由于某种场景限制无法使用客户端库，可由负载均衡器来实现路由功能.</li>
    </ul>
  </li>
  <li>数据节点转发
    <ul>
      <li>对于采用去中心化的路由存储可由数据节点转发.</li>
    </ul>
  </li>
</ol>

<p>一般来讲，路由转发的策略与路由一致性的解决方案有关，中心化的路由一般可支持客户端转发和路由层转发，去
中心化的路由可支持以上3种，比如Voldemort可配置以上3种方案。</p>

<h2 id="section-6">容灾</h2>

<p>容灾的第一步是检测失败节点，不管是什么检测算法都需要发送心跳，所以检测的通信模式将直接制约系统的可伸缩
性。根据心跳的通信模式分为3种：</p>

<ol>
  <li>星形模式
    <ul>
      <li>主节点定期发送心跳给数据节点，数据节点也可发送心跳给主节点</li>
      <li>例子：GFS, BigTable, ElasticSearch</li>
    </ul>
  </li>
  <li>全连通模式
    <ul>
      <li>所有节点相互之间发送心跳</li>
      <li>例子：Dynamo, Cassandra, Redis Cluster</li>
    </ul>
  </li>
  <li>分组模式
    <ul>
      <li>仅某个分区的副本节点之间发送心跳</li>
      <li>例子：Ceph, MongoDB</li>
    </ul>
  </li>
</ol>

<p>很明显，星形模式对主节点的负担比较重，可伸缩性完全由主节点制约。全连通模式的通信量比较大，伸缩性也会
有所限制，但是其可用性比较好，因为所有节点均可作为备胎用于数据迁移，只要有一个节点可用，整个系统就可用。
分组模式的伸缩性是最好的，节点数的增多不会引起通信量增加，同时若其数据可在整个集群间迁移，其可用性也
非常好。</p>

<p>大多数系统的失败检测是周期性运行的，不过Dynamo和Cassandra的失败检测是客户端驱动的，因此检测算法的触发
方式分两种：</p>

<ol>
  <li>周期性触发
    <ul>
      <li>大多数系统是这种</li>
    </ul>
  </li>
  <li>客户端驱动
    <ul>
      <li>Dynamo和Cassandra</li>
    </ul>
  </li>
</ol>

<p>节点失败的原因有很多，有些是短暂的，有些是永久的，检测算法一般无法区分这两者，所以在处理失败时必须有
所权衡，既不能太敏感也不能过于迟钝，否则会导致失败处理不及时或者系统不稳定。所以检测到失败后还必须权
衡失败的性质然后再处理。有的系统是用中心化的方式来判断失败的性质，有些是用去中心化的方式，所以基本可
分为两种：</p>

<ol>
  <li>中心化检测
    <ul>
      <li>检测结果上报到某个节点或者监控集群进行全局性判断是否需要进行数据迁移.</li>
      <li>GFS, BigTable, Ceph, ElasticSearch, Redis Cluster</li>
    </ul>
  </li>
  <li>去中心化检测
    <ul>
      <li>本地自行判断，由于缺乏全局信息，仅可处理短暂失败，长期失败需要人工干预.</li>
      <li>Dynamo, Cassandra</li>
    </ul>
  </li>
</ol>

<p>对于短暂失败一般通过重试或者hinted handoff解决。永久性失败必须迁移数据。有些系统需要人为干预来迁移，
比如Dynamo和Cassandra.</p>

<h2 id="section-7">案例介绍</h2>

<p>本节将重点介绍几个著名的分布式系统的实际例子，它们对许多系统的设计都有很大影响，了解这几个系统的设计
方案将有助于了解其它系统，也可在自己设计系统时参考。</p>

<h3 id="gfs">GFS</h3>

<p>GFS是Google设计的分布式文件系统，将多个机器的硬盘抽象成了一个硬盘。由一个主节点、多个数据节点和客户端
库组成。主节点负责维护全局的路由信息，并检测数据节点的状态。数据节点负责数据的可靠存储。客户端负责读写
请求，从主节点拉取路由信息。</p>

<p>由于只需要根据文件名来查找所以采用Hash分区。并采用动态路由策略。路由信息采用中心化方式，便于全局协调。
节点的状态监测采用星形通信模式和中心化监测机制。很容易看出，单一的主节点是容量瓶颈和系统的风险点。后来
Google增加了主节点的冷备来防止单点风险，但是仍然解决不了容量问题。之所以采用这样的中心化架构就是因为
实现简单。</p>

<h3 id="bigtable">BigTable</h3>

<p>GFS存储的是非结构化数据，不方便查询。BigTable是基于GFS设计的结构化存储系统，支持列式数据模型。其架构
类似于GFS，包括一个主节点、多个数据节点和客户端库。主节点负责维护全局路由信息，它存储在Chubby上，并
周期性检测数据节点的状态。数据节点负责客户端的读写请求，而数据是存储在GFS。</p>

<p>由于需要支持按范围查询，所以采用范围分区方案。分区的大小可根据数据量动态调整，拆分或合并。与GFS一样采用
中心化路由。为了保证路由信息的一致性，必须保证任意时刻每个分区只有一个数据节点可访问，BigTable用租约
机制来保证这一点（基于Chubby的带超时的锁）。数据节点的状态由主节点周期性检测，若失败则调整路由信息由
新节点来接管之前的分区。</p>

<p>虽然主节点只有一个，但并不会过于影响可用性，因为客户端的访问路径并不经过主节点，而是从Chubby获取路由
信息。主节点只是负责检测数据节点的状态、负载均衡等。但是如果主节点长期故障将影响可用性。</p>

<h3 id="dynamo">Dynamo</h3>

<p>Dynamo是Amazon设计的用于存储用户购物车的分布式存储系统，主要强调可用性。所以其设计思路与以上两个系统
有很大的区别。它是一个完全去中心化的架构，所有节点都是数据节点，角色完全对称，不存在特殊的节点。客户端
可访问任何节点进行读写，只要有一个节点存活则整个系统就是可用的。</p>

<p>由于不需要按范围查询并为了保证数据分布均匀，采用hash分区。为了保证路由信息变化时数据迁移量尽量小，采用
一致性Hash方案。所有节点存储全局的路由信息，并通过Gossip协议维护最终一致性。所有节点相互之间检测状态，
由客户端驱动，本地化决策，可容忍短暂的失败。长期的节点失败由人工干预解决。</p>

<p>正是由于采用了完全去中心化的架构，其可用性达到了惊人的5个9.</p>

<h3 id="cassandra">Cassandra</h3>

<p>Cassandra是Facebook开发的高可用存储系统，用于其消息搜索。它结合了BigTable的数据模型和Dynamo的分区管
理方案，也是一个完全去中心化的架构。与Dynamo相比，只是在一致性hash和多版本冲突解决等细节上有区别。</p>

<h3 id="ceph">Ceph</h3>

<p>Ceph也是一个分布式文件系统，强调伸缩性。由客户端库、一小组Monitor集群和许多OSD组成。Monitor集群维护全局的
OSD拓扑结构，在节点失败时调整拓扑结构。Monitor集群运行Paxos协议来保证拓扑结构的一致性和可靠性。Monitor集群的
拓扑结构信息通过类似Gossip的协议传递给所有OSD。OSD负责数据存储及复制，处理读写请求，相互之间检测心跳
状态，并在节点失败时迁移数据等。</p>

<p>由于只需要支持精确查找，Ceph采用按hash分区。分区大小不可自动调整，但可以人工增加。Ceph最具创新的地方
是其路由算法，跟其它系统不同的是，分区到节点的映射不是查表而是伪随机算法CRUSH计算出来的，具有以下特点：</p>

<ol>
  <li>根据key、拓扑结构和分配规则即可算出节点地址；</li>
  <li>确定性：相同的输入产生相同的输出；</li>
  <li>一定程度上保证分区的分布是均匀的，并可考虑到节点的网络层次结构；</li>
  <li>当拓扑结构发生变化时数据迁移量很小。</li>
</ol>

<p>由于CRUSH算法的支持，路由信息只需要存储拓扑结构就可以了，其存储空间只与OSD的数量有关，而与分区数量无关，
大大减小了需要的存储量，有助于伸缩性的实现。</p>

<p>与BigTable类似，Ceph采用租约机制保证路由信息的一致性。</p>

<p>Ceph的心跳检测是分组模式，即保存同一分区的OSD之间发送心跳，当发现节点失败时请求Monitor集群更新拓扑结构
重新分布数据。分组模式有助于减小通行量，增加了伸缩性。同时为了减小Monitor集群的负载，更新拓扑结构的请求
会合并批量上报给Monitor集群。</p>

<p>与GFS相比，Ceph提高伸缩性的策略有：</p>

<ol>
  <li>分区的粒度更粗，路由信息更小，增加了系统容量
    <ul>
      <li>GFS的分区粒度是文件，Ceph的一个分区可存储多个文件，粒度由分区的数量决定，这样有助于减小路由信息，
使得中心化的路由节点可支持更多数据。</li>
      <li>Ceph采用CRUSH算法计算路由信息，进一步压缩了路由信息。</li>
    </ul>
  </li>
  <li>路由信息扩散至所有数据节点，可以让数据节点承担更多工作（包括数据复制、失败检测及恢复、负载均衡），
减轻Monitor集群的压力
    <ul>
      <li>GFS的路由信息仅存储在主节点，导致许多管理工作只能由主节点来负责，成为性能瓶颈。</li>
    </ul>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>综合以上几个例子可以看出，设计分布式系统基本有两种思路：中心化和去中心化架构。中心化架构比较简单，容
易实现，而且由于有全局信息便于全局协调，包括数据分布、负载均衡、数据迁移等。为了防止中心节点成为性能
瓶颈，通常将控制逻辑和数据逻辑分离，只有控制逻辑经过中心节点，而数据逻辑尽量直接与数据节点通信。比如，
尽量让客户端缓存路由信息，防止每次都要访问中心节点。Ceph是一个极好的案例，尽量让数据节点分担管理工作，
有助于高伸缩性的实现。完全的去中心化架构任何模块都没有单点风险，拥有极好的可用性，但是实现比较复杂，
因此很少系统采用。由于其节点的功能是对称的，所以负载分布也较为均匀，没有节点会因为承担更多的工作而成
为性能瓶颈，可伸缩性也很好。</p>

<p>设计分布式系统时一个重要的考虑是CAP理论，其中P代表分区容忍性，这个是世界的现实，无法绕过去，所以只能
在一致性和可用性之间进行权衡。强调可用性的系统可参考Dynamo的解决方案，采用去中心化的架构。而强调一致
性的系统则建议采用中心化架构，因为一致性必然涉及到多个节点的协调，若维护有一个全局信息将更方便进行协
调。</p>

<h2 id="references">References</h2>

<ul>
  <li>The Google File System</li>
  <li>Ceph: A Scalable, High-Performance Distributed File System</li>
  <li>Dynamo: Amazon’s Highly Available Key-value Store</li>
  <li>Cassandra - A Decentralized Structured Storage System</li>
  <li>RADOS: A Scalable, Reliable Storage Service for Petabyte-scale Storage Clusters</li>
  <li>Bigtable: A Distributed Storage System for Structured Data</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UNIX信号]]></title>
    <link href="http://spockwangs.github.io/blog/2017/12/02/unix-signals/"/>
    <updated>2017-12-02T20:27:41+08:00</updated>
    <id>http://spockwangs.github.io/blog/2017/12/02/unix-signals</id>
    <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>UNIX信号在编程中用的不多，但是对于长时间运行的程序还是很有用的，比如通知程序重新加载配置文件、提早退
出打印一些信息、监控子进程是否还活着。</p>

<p>本文将澄清UNIX信号的概念，使用信号的注意事项及常用的编程模式。
<!--more--></p>

<h1 id="unix">UNIX信号的概念</h1>

<p>当触发信号产生的事件发生时（如硬件异常、定时器过期、终端命令或者调用<code>kill()</code>发送信号），信号将发送给
相关进程或线程。当产生信号时将决定该信号时发送给进程或进程中的某个线程。如果信号的产生原因与线程有关
（如该线程产生了内存访问异常），则发送给该线程；否则，发送给该进程（例如，终端活动）。</p>

<p>信号产生后，如果没有被阻塞，则投递（deliver）给相关进程或线程执行对应的动作，或者被接受（accept，调用<code>sigwait()</code>系列函数）。</p>

<p>在线程产生到投递之间，信号处于未决状态（pending）。信号在投递前也可以被阻塞。发送给线程的信号，如果被
阻塞，且该信号的相关动作不是忽略，则该信号将一直处于未决状态，直到：1）解除阻塞；2）被接受；3）其相关
动作设置为忽略。发送给进程的信号，将发送给愿意接受该信号或没有阻塞该信号的线程处理；如果没有这样的线程
则一直处于阻塞状态，直到被某个线程：1）解除阻塞；2）接受；3）设置为忽略该信号。如果发送给进程的信号被
阻塞且其相关动作是忽略时，该信号是否直接丢弃还是处于未决状态是不确定的。</p>

<p>POSIX标准并没有要求信号可以排队，所以一个未决信号重复产生时可能只会投递或接受一次。另外，多个未决信号
在投递或接受时的顺序也是不确定的。</p>

<p>每个信号都有一个与之关联的动作，如下3种：</p>

<ul>
  <li>默认
    <ul>
      <li>默认动作由系统在程序启动时设置好。注意：有些信号的默认动作是调用<code>_exit()</code>终止程序。</li>
    </ul>
  </li>
  <li>忽略
    <ul>
      <li>注意：<code>SIGKILL</code>和<code>SIGSTOP</code>是不能设置为忽略的。</li>
    </ul>
  </li>
  <li>用户自定义函数
    <ul>
      <li>用户可设置自定义函数捕获一个信号，但是<code>SIGKILL</code>和<code>SIGSTOP</code>是无法捕获的。另外，<code>SIGSEGV</code>，<code>SIGILL</code>，
<code>SIGBUS</code>和<code>SIGFPE</code>的捕获函数必须终止程序而不能正常返回。</li>
      <li>捕获函数的实现必须保证信号安全。</li>
    </ul>
  </li>
</ul>

<h1 id="section">信号安全</h1>

<p>POSIX要求信号的捕获函数必须满足以下要求：</p>

<ul>
  <li>只能访问<code>errno</code>、<code>volatile sig_atomic_t</code>类型的全局变量或者原子类型的全局变量。</li>
  <li>只能调用规定的信号安全函数。</li>
  <li>注意保存和恢复<code>errno</code>.</li>
</ul>

<p>所以说信号的捕获函数很难实现复杂的逻辑，甚至打印消息也不行（<code>printf()</code>不是信号安全的）。只能通过
原子变量传递一些简单的信息，线程条件变量和锁都不能用（使用线程锁可能导致死锁）。</p>

<h1 id="section-1">如何注册信号处理函数</h1>

<p>系统提供了两个API注册信号处理函数，简单的版本定义如下：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="kt">sig_t</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">sig_t</span> <span class="nf">signal</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">,</span> <span class="kt">sig_t</span> <span class="n">func</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
<p>注册一个函数，并返回之前注册的函数。当信号投递后信号处理函数执行期间，该信号将被阻塞直到执行完毕，
防止信号重入。</p>

<p>复杂的版本定义如下，可设置信号处理有关的更多属性。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">sigaction</span> <span class="p">{</span>
</span><span class="line">    <span class="k">union</span> <span class="n">__sigaction_u</span> <span class="n">__sigaction_u</span><span class="p">;</span>  <span class="cm">/* signal handler */</span>
</span><span class="line">    <span class="kt">sigset_t</span> <span class="n">sa_mask</span><span class="p">;</span>               <span class="cm">/* signal mask to apply */</span>
</span><span class="line">    <span class="kt">int</span>     <span class="n">sa_flags</span><span class="p">;</span>               <span class="cm">/* see signal options below */</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">union</span> <span class="n">__sigaction_u</span> <span class="p">{</span>
</span><span class="line">     <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">__sa_handler</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span><span class="line">     <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">__sa_sigaction</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">siginfo_t</span> <span class="o">*</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define sa_handler      __sigaction_u.__sa_handler</span>
</span><span class="line"><span class="cp">#define sa_sigaction    __sigaction_u.__sa_sigaction</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">sigaction</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sigaction</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">act</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sigaction</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">oact</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
<p>这个API相比于上面的简单版本可以设置信号处理函数执行期间是否阻塞其它信号，或者当信号中断一个慢速的IO
时是否自动重新执行IO，细节可参考<code>sigaction(2)</code>.</p>

<h1 id="section-2">信号处理的编程模式</h1>

<p>信号处理函数的要求非常严格，除了设置原子变量外也做不了其它事情，下面举一个简单的例子用终端产生信号让
程序提前结束。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;thread&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">volatile</span> <span class="kt">sig_atomic_t</span> <span class="n">g_quit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">stop</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">g_quit</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">signal</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">stop</span><span class="p">);</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">([]()</span> <span class="p">{</span>
</span><span class="line">                    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">g_quit</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                        <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">                    <span class="p">}</span>
</span><span class="line">                <span class="p">}).</span><span class="n">join</span><span class="p">();</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>通知线程退出的前提是该线程周期性检测是否需要退出。但是在比较复杂的场景下，周期检测并不可取，
需要采取更复杂的通信机制来通知线程退出，比如条件变量，但是信号处理函数是不能操作条件变量的，
怎么通知呢？</p>

<p>回忆一下，信号除了投递调用信号处理函数外还可以被线程主动接受，这样我们可以实现任意复杂的逻辑。
创建一个线程专门接受信号，而其它所有线程都阻塞这些信号，由这个专用线程来实现通知逻辑。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;thread&gt;</span>
</span><span class="line"><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;mutex&gt;</span>
</span><span class="line"><span class="cp">#include &lt;condition_variable&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">// Block SIGINT for all threads.  The subsequently created threads</span>
</span><span class="line">    <span class="c1">// will inherit this mask.</span>
</span><span class="line">    <span class="kt">sigset_t</span> <span class="n">set</span><span class="p">;</span>
</span><span class="line">    <span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">set</span><span class="p">);</span>
</span><span class="line">    <span class="n">sigaddset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">set</span><span class="p">,</span> <span class="n">SIGINT</span><span class="p">);</span>
</span><span class="line">    <span class="n">pthread_sigmask</span><span class="p">(</span><span class="n">SIG_BLOCK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">set</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">condition_variable</span> <span class="n">cv</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Start a thread dedicated to process signals.</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">([</span><span class="o">&amp;</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">                    <span class="kt">int</span> <span class="n">sig</span><span class="p">;</span>
</span><span class="line">                    <span class="n">sigwait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sig</span><span class="p">);</span>
</span><span class="line">                    <span class="k">if</span> <span class="p">(</span><span class="n">sig</span> <span class="o">==</span> <span class="n">SIGINT</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                        <span class="n">cv</span><span class="p">.</span><span class="n">notify_one</span><span class="p">();</span>
</span><span class="line">                    <span class="p">}</span>
</span><span class="line">                <span class="p">}).</span><span class="n">detach</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// The worker thread.</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">([</span><span class="o">&amp;</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">                    <span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mutex</span><span class="p">;</span>
</span><span class="line">                    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line">                    <span class="n">cv</span><span class="p">.</span><span class="n">wait</span><span class="p">(</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line">                <span class="p">}).</span><span class="n">join</span><span class="p">();</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="conclusion">Conclusion</h1>

<p>在处理信号时，如果只需要周期性检查信号是否已经发生，则可注册一个信号处理函数即可搞定。但是如果需要
处理复杂逻辑，则最好创建一个专用线程来同步处理信号。</p>

<h1 id="references">References</h1>

<ul>
  <li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/">POSIX Spec</a>, System Interfaces, Singal Concepts</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程私有存储]]></title>
    <link href="http://spockwangs.github.io/blog/2017/12/01/thread-local-storage/"/>
    <updated>2017-12-01T21:08:54+08:00</updated>
    <id>http://spockwangs.github.io/blog/2017/12/01/thread-local-storage</id>
    <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>线程私有变量（Thread Local Storage）之于线程相当于静态变量之于进程，与进程变量相比是每个线程都有一份，
也就是所谓的“私有”。也可以把线程私有变量理解为key-value对，其中key是线程ID。它的主要作用是在多线程编程
中避免锁竞争的开销。本文将重点介绍线程私有变量的几种形式、用法及其背后的实现原理。
<!--more--></p>

<h1 id="tls">显示TLS</h1>

<p>POSIX线程库提供了如下API管理TLS：</p>

<ul>
  <li><code>pthread_key_create()</code>
    <ul>
      <li>创建一个TLS变量，并设置析构函数</li>
    </ul>
  </li>
  <li><code>pthread_setspecific()</code>
    <ul>
      <li>给TLS变量赋值</li>
    </ul>
  </li>
  <li><code>pthread_getspecific()</code>
    <ul>
      <li>获取TLS变量的当前值</li>
    </ul>
  </li>
  <li><code>pthread_key_delete()</code>
    <ul>
      <li>回收TLS变量，但是注意并不调用TLS的析构函数</li>
    </ul>
  </li>
</ul>

<p>下面是一个简单的例子。</p>

<pre><code class="language-c++">#include &lt;pthread.h&gt;
#include &lt;thread&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;

using namespace std;

void cleanup(void* p)
{
    cout &lt;&lt; "clean" &lt;&lt; endl;
    int* pi = reinterpret_cast&lt;int*&gt;(p);
    delete pi;
}

int main()
{
    pthread_key_t tls_key;
    int err = pthread_key_create(&amp;tls_key, cleanup);
    assert(err == 0);
    std::thread([=] {
                    void* p = pthread_getspecific(tls_key);
                    // 还没设置过值，所以是空指针。
                    assert(p == nullptr);
                    p = new int(3);
                    int err = pthread_setspecific(tls_key, p);
                    assert(err == 0);
                    p = pthread_getspecific(tls_key);
                    int a = *reinterpret_cast&lt;int*&gt;(p);
                    assert(a == 3);
                }).join();
    void *p = pthread_getspecific(tls_key);
    // 主线程的TLS与子线程是分开的，所以还是空指针。
    assert(p == nullptr);
    
    // 由于子线程已退出，所以这里可以回收|tls_key|了。
    err = pthread_key_delete(tls_key);
    assert(err == 0);
    return 0;
}
</code></pre>

<p>有几个值得注意的地方：</p>

<ul>
  <li><code>pthread_key_delete()</code>不会自动调用每个线程TLS变量的析构函数，而且在回收key后线程在退出时也不会再调
用析构函数，所以必须要确定: 1) 所有线程已经析构TLS变量（要么显示析构，要么线程退出，像上面的例子）; 2)而且不再使用
该key时才能回收这个key.  这两个条件一般难以确定，所以实际使用时一般也不会回收key.</li>
  <li><code>pthread_setspecific()</code>在覆盖之前的value时不会主动调用析构函数，调用线程必须自己保证释放资源。</li>
  <li>TLS key的个数是有限的，通过<code>PTHREAD_KEYS_MAX</code>(limits.h)获取（在我电脑上是512）。下面我会
讲到如何突破这个限制。</li>
</ul>

<h1 id="tls-1">显示TLS的实现</h1>

<p>在Linux中每个进程有一个全局的数组管理TLS key，定义类似如下：</p>

<pre><code class="language-cpp">struct pthread_key_struct {
    uintptr_t seq;
    void (*destructor)(void*);
} __pthread_keys[PTHREAD_KEYS_MAX];
</code></pre>

<p>每个元素用于存储key的序列号（用于判断key是否有效，下面解释）和其对应的析构函数。序列号初始值为0.
<code>pthread_create_key()</code>会从该数组中找到一个还未分配的元素，将其序列号加1，记上析构函数地址，并将其下标
作为TLS key返回。那么如何判断一个key是否已分配呢？</p>

<pre><code class="language-C++">#define KEY_UNUSED(seq) (((seq) &amp; 1) == 0)
</code></pre>
<p>若序列号为偶数则表示未分配，分配时将其加1变成奇数即可。这个操作采用原子CAS来完成，以保证线程安全。在
<code>pthread_key_delete()</code>时也会将序列号加1，表示可以继续使用，通过序列号机制来保证回收的key不会被复用
（复用的key会导致线程在退出时可能会调用错误的析构函数）。但是一直加1会导致序列号回绕，还是会复用key。
所以创建key时会检查是否有回绕风险，如果有则创建失败。</p>

<pre><code class="language-C++">#define KEY_USABLE(seq) (((uintptr_t)(seq)) &lt; ((uintptr_t) ((seq) + 2)))
</code></pre>

<p>每个线程都有一个自己的线程控制块TCB（管理寄存器、线程栈等），里面有一个TLS数组(我的电脑上是32个元素）
用于存放线程私有变量。TLS数组的每个元素定义类似如下：</p>

<pre><code class="language-C++">struct pthread_key_data {
    uintptr_t seq;
    void* data;
};
</code></pre>
<p>上面提到过<code>pthread_key_create()</code>返回的TLS key其实是<code>__pthread_keys</code>数组的下标。
<code>pthread_setspecific()</code>根据TLS key定位TLS数组的一个元素，并设置其序列号seq和数据指针。
如果这个数组不够用，则会再动态分配一个二级数组（在我的电脑上是一个32x32的稀疏数组）。
线程退出时，<code>pthread_key_data</code>中的序列号用于判断该key是否仍在使用中（即与<code>__pthread_keys</code>中
的同一个下标对应的序列号是否相同），若是则调用TLS的析构函数。</p>

<h2 id="boosttls">Boost的TLS实现</h2>

<p>为了突破POSIX线程库对TLS变量个数的限制，<code>boost::thread_specific_ptr</code>只需要创建一个key，并设置该
key对应的TLS变量指向一个<code>map</code>，这样可以在该<code>map</code>中存放无数个（仅受内存限制）TLS变量。</p>

<p>另外<code>boost::thread_specific_ptr</code>的<code>reset()</code>可规避<code>pthread_setspecific()</code>忘记释放资源的坑。
不过<code>boost::thread_specific_ptr</code>的析构函数的执行时机也有与<code>pthread_key_delete()</code>一样的限制。</p>

<h1 id="tls-2">隐式TLS</h1>

<p>相比于上面显示TLS需要动态调用API构造线程私有变量，隐式TLS更加方便，采用编程语言提供的关键字声明即可。
下面是采用C++11的关键字<code>thread_local</code>重写上面的程序。</p>

<pre><code class="language-C++">#include &lt;thread&gt;
#include &lt;cassert&gt;
#include &lt;memory&gt;

using namespace std;

int main()
{
    thread_local unique_ptr&lt;int&gt; tls_int_ptr;
    std::thread([] {
                    tls_int_ptr.reset(new int(3));
                    assert(*tls_int_ptr == 3);
                }).join();
    // 主线程的TLS与子线程是分开的，所以还是空指针。
    assert(tls_int_ptr == nullptr);
    return 0;
}
</code></pre>

<p><code>thread_local</code>声明的变量在线程启动时构造，并在线程退出时析构。而且不像POSIX的TLS，没有数量限制。但是
其析构的时机没法动态控制。</p>

<h2 id="threadlocal">为什么<code>thread_local</code>不能是非静态变量</h2>

<p>根据C++11标准，<code>thread_local</code>变量必须是静态变量（名字空间变量、函数静态变量或者类的静态成员变量），不
能是类的非静态成员。例如，下面的代码是非法的:</p>

<pre><code class="language-C++">class C {
    int a;
    thread_local int b;
};
</code></pre>
<p>必须如下声明<code>b</code>是静态成员变量：</p>

<pre><code class="language-C++">class C {
    int a;
    thread_local static int b;
};
</code></pre>
<p>这有时候确实不方便，因为我们希望每个<code>C</code>对象都有自己的成员副本<code>b</code>，不过这可以用下面的方法规避这个问题：</p>

<pre><code class="language-C++">class C {
    int GetBPerThread()
    {
        return b_map[this];
    }

    int a;
    thread_local static std::map&lt;void*, int&gt; b_map;
};
</code></pre>

<p>既然可以规避，那为啥标准不直接支持呢？这是因为TLS变量的内存布局与类的非静态成员不兼容导致的。假设
<code>b</code>是一个非静态成员，那么其内存位置必然与<code>a</code>是相邻的。但是<code>a</code>是全局唯一的（对于某个C对象来讲它
是唯一的，不同的C对象有不同的<code>a</code>），如果<code>b</code>的位置与<code>a</code>相邻，则<code>b</code>也必然是唯一的，这就与其TLS变量
的身份相冲突了。</p>

<h1 id="tls-3">隐式TLS的实现</h1>

<p>下面介绍的是ELF对TLS的实现，其它对象文件格式的支持也是类似的。</p>

<h2 id="elftls">ELF中的TLS段</h2>

<p>代码中所有的全局变量都存储在<code>.data</code>（静态初始化变量）和<code>.bss</code>（未静态初始化的变量）这两个段，相应地，
TLS变量分别存储在<code>.tdata</code>（由<code>SHF_PROGBITS</code>+<code>SHF_TLS</code>标记）和<code>.tbss</code>（由<code>SHF_NOBITS</code>+
<code>SHF_TLS</code>标记）.</p>

<p>与<code>.data</code>不一样的是，运行时程序不会直接访问这些段。在程序启动后，动态链接器会对这两个段进行动态初始化
（如果有），之后这两个段不再变化，而是作为TLS的<strong>初始化镜像</strong>保存起来。每次启动一个线程时（包括启动
线程）都会分配TLS块将初始化镜像复制过来。所以每个线程启动时TLS都是相同的。</p>

<p>每个线程的TLS块都是运行时分配的，所以在链接时是不知道其地址的，要访问TLS变量必须借助动态链接器才能计算出
其地址。链接时只能知道TLS变量在TLS段中的偏移（内存中<code>.tbss</code>紧跟在<code>.tdata</code>后）。</p>

<h2 id="tls-4">TLS的运行时分配</h2>

<p>根据上面的介绍，要访问TLS变量需要确定两个信息：</p>

<ol>
  <li>定义TLS变量的模块（可执行程序exec或动态共享库DSO）；</li>
  <li>TLS变量在该模块的TLS段的偏移.</li>
</ol>

<p>这两个信息在链接时是不知道的，需要动态链接器在运行时计算。然后再根据这两个信息查找这个TLS变量在当前线程
中的地址，这需要借助如下的数据结构来完成。</p>

<p><img src="http://spockwangs.github.io/images/tls_data_structure.jpg" title="Fig. 1 Thread-Local Storage data structures" /></p>

<p>$tp_t$表示线程$t$的线程寄存器，指向线程控制块TCB，其在0偏移处指向动态线程向量$dtv_t$. DTV第一个元素
是一个generation counter，用于判断该DTV是否需要更新，下面会进一步解释；其它元素包含了所有
该线程用到的模块的TLS块的地址，用模块ID作为下标访问。有些模块的TLS块跟TCB放在一起，是程序启动时就分配
的（如exec及其依赖的DSO），称为<em>静态模型</em>；有些模块是程序运行中动态加载的（通过<code>dlopen()</code>动态加载），
TLS块在线程第一次访问时分配，称为<em>动态模型</em>。对于静态模型，在程序启动时动态链接器就可以确定其相对于$tp_t$
的偏移值，编译器生成代码时可以直接使用这些偏移值来访问。对于动态模型，由于TLS时延迟分配的，需要调用运行时
系统提供的<code>__tls_get_addr()</code>获取其地址。</p>

<h3 id="section">程序启动</h3>

<p>程序启动时，动态链接器搜集所有模块的TLS信息，包括以下字段：</p>

<ul>
  <li>TLS初始化镜像的地址</li>
  <li>TLS初始化镜像的大小</li>
  <li>模块的偏移值$tlsoffset$</li>
  <li>是否使用静态模型</li>
</ul>

<p>动态加载一个模块时也会加入这些信息。线程库将利用这些信息为新建的线程分配TLS块和DTV.  对于使用动态模型和动态
加载的模块，线程库会延迟分配TLS块，直到第一次访问。</p>

<h3 id="tls-5">延迟分配TLS</h3>

<p>对于延迟分配的TLS，由于其偏移值在启动时未知，必须借助于<code>__tls_get_addr()</code>获取，定义类似如下：</p>

<pre><code class="language-C">struct tls_index {
    size_t module_id;
    size_t offset;
};

void* __tls_get_addr(struct tls_index* ti)
{
    // Get the DTV of current thread.
    dtv_t* dtv = GET_CURRENT_DTV();

    // Check if the DTV is stale, and if so, update it.
    if (dtv[0].counter != dl_tls_generation) {
        update_dtv();
    }

    // Get the TLS block. If not allocated yet, allocate now.
    char* tls_block = dtv[ti-&gt;module_id];
    if (tls_block == UNALLOCATED_TLS_BLOCK) {
        tls_block = dtv[ti-&gt;module_id] = allocate_tls(module_id);
    }

    return tls_block + ti-&gt;offset;
}
</code></pre>
<p><code>module_id</code>是模块ID，由动态链接器在加载模块时分配，从1开始（exec的模块ID固定是1）。</p>

<p>当动态加载或卸载一个模块时，动态链接器维护的<code>dl_tls_generation</code>会加1，表示模块信息有了变化。由于每个线
程的DTV时延迟更新的，所以每个线程的<code>dtv[0]</code>也会维护自己的<code>generation counter</code>，用于在访问TLS时判断
是否需要更新DTV.</p>

<h2 id="tls-6">TLS的访问模式</h2>

<p>上面已经提到过TLS的两种访问模式：静态模式和动态模式，这一节针对不同场景细化为4种模式。对于每一种模式，
都要求动态链接器在程序启动或动态加载模块时立即处理TLS相关的重定位。TLS的重定位是为了确定模块ID和在TLS块
中的偏移，然后存储在<code>GOT</code>表中。</p>

<p>模块ID和偏移有时候需要运行时才能确定，有时候链接时即可知道，因此组合起来可分为4种访问模式。具体采用哪种模式
由编译器和链接器共同决定。</p>

<h3 id="general-dynamic">General Dynamic</h3>

<p>支持访问所有的TLS变量，包括exec和DSO定义的TLS；也支持延迟分配TLS.  这种模式下不需要链接时知道模块ID和
偏移值。程序启动时动态链接器通过重定向确定模块ID和TLS变量的偏移值，存储在<code>GOT</code>表中。在访问TLS时调用
<code>__tls_get_addr()</code>，传入这两个参数，获取TLS变量的地址。</p>

<h3 id="local-dynamic">Local Dynamic</h3>

<p>如果链接编辑器确定访问的TLS变量属于本模块（如文件作用域的TLS变量），则采用此模型。TLS变量的偏移值在链接时
即可确定，只需要调用<code>__tls_get_addr()</code>确定TLS块的地址即可。由于TLS块的地址可以在不同的本地TLS变量
访问时复用，所以相比于GD模型编译器可利用此模型生成有效的代码减少对<code>__tls_get_addr()</code>的调用次数。例如，在同一个函数
内访问不同的本地TLS变量，只需要调用一次<code>__tls_get_addr()</code>即可。</p>

<h3 id="initial-exec">Initial Exec</h3>

<p>如果可以确定访问的TLS变量在程序启动时就已分配好，则采用此模型。TLS变量相对于线程寄存器的偏移量可在
程序启动时由动态链接器计算好存放在GOT表中。访问TLS变量相当于一次间接地址访问，不需要调用<code>__tls_get_addr()</code>.</p>

<h3 id="local-exec">Local Exec</h3>

<p>如果可以确定在exec中访问exec定义的TLS变量，则采用此模型。链接时即可知道TLS变量相对于线程寄存器的偏移量，
计算其地址相当于寄存器加上一个常量，因此访问TLS变量与访问局部变量没有区别。</p>

<h1 id="per-thread-resource-allocation-pattern">Per-thread resource allocation pattern</h1>

<p>线程局部变量可以有效避免锁竞争，根据上面介绍的TLS实现来看，访问成本与普通变量也差不多，但是它完全防止了
线程之间的通信，很多时候不满足需求。所以需要在避免竞争与线程通信之间取得平衡，一种常用的模式是每个线
程分配自己的私有资源以满足大部分需求，只有在必要的时候才与其它线程通信。如下的程序实现了并发统计，在
线程结束后由主线程汇总打印。</p>

<pre><code class="language-C++">#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;ctime&gt;
#include &lt;vector&gt;

size_t kNumThreads = 10;

int main()
{
    uint32_t stats[kNumThreads];
    std::vector&lt;std::thread&gt; threads;
    for (size_t i = 0; i &lt; kNumThreads; ++i) {
        threads.push_back(
                std::thread([&amp;, i] {
                                time_t start = std::time(nullptr);
                                do_something();
                                time_t end = std::time(nullptr);
                                stats[i] = end-start;
                            }));
    }
    for (auto&amp; t : threads) {
        t.join();
    }
    uint32_t total = 0;
    for (auto t : stats) {
        total += t;
    }
    std::cout &lt;&lt; "total=" &lt;&lt; total &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>主线程分配了一个数组，每个元素对应一个子线程，防止线程竞争。这样也方便了子线程将数据传回给主线程。
如果采用线程私有变量则比较麻烦，必须借助其它全局变量来通信。所以说为了避免竞争并不一定需要线程私有变量。</p>

<p>Linux内核很多统计即采用了这种模式，每个CPU核维护自己的统计数据，需要报告数据时则遍历所有核的数据合计
输出。著名的内存分配器tcmalloc也采用了这种模式来避免锁竞争，提高并发效率。它针对小内存的分配和释放做
了优化，小内存从本线程维护的内存池分配，大内存才从全局的内存池分配。同时为防止资源浪费，会在线程之间进行
内存资源调度，将本线程长期不用的内存转移给其它线程使用。所以说在大多数情况下避免了资源协调。</p>

<h1 id="conclusion">Conclusion</h1>

<p>如果线程之间完全不需要通信，推荐采用隐式TLS，使用非常方便，也不用担心资源释放的问题。但是如果要自己
灵活控制TLS资源的释放，则可以考虑采用显示TLS，推荐使用Boost库，可省不少心。</p>

<p>如果线程之间多少是需要通信的，不建议TLS，建议还是用共享数据结构加锁保护。为了提高性能可考虑使用原子变
量或者无锁数据结构。最终极的优化方法还是优化多线程的交互结构，尽量减少线程间通信。</p>

<h1 id="references">References</h1>

<ul>
  <li><a href="https://uclibc.org/docs/tls.pdf">ELF Handling of Thread-Local Storage</a></li>
  <li><a href="https://docs.oracle.com/cd/E19683-01/817-3677/chapter8-tbl-1/index.html">Linkers and Libraries Guide</a></li>
  <li><a href="http://david-grs.github.io/tls_performance_overhead_cost_linux/">TLS performance overhead and cost on GNU/Linux</a></li>
  <li><a href="http://blog.csdn.net/chosen0ne/article/details/9338591">TCMalloc小记</a></li>
  <li><a href="http://www.boost.org/doc/libs/1_65_1/doc/html/thread/thread_local_storage.html">Boost Thread Local Storage</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Feature Flags进行并行开发和持续集成]]></title>
    <link href="http://spockwangs.github.io/blog/2014/09/03/using-feature-flags-enable-concurrent-dev/"/>
    <updated>2014-09-03T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2014/09/03/using-feature-flags-enable-concurrent-dev</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>在服务开发过程中经常需要一边修复线上bug，一边又要开发新特性，而且可能需要同时开发好几个新特性，不同
的新特性开发持续的时间不等。这样要等到所有代码都开发完、测试好需要很长时间，代码一直处于无法上线的状
态，无法敏捷响应需求。如果这时候线上又出现紧急bug，就没法及时发布修复。
<!--more--></p>

<h2 id="feature-branch">使用feature branch的解决方案</h2>

<p>为了防止修复bug和特性开发不相互干扰，并能及时响应线上bug，一般采用源代码版本管理系统的分支功能：</p>

<ul>
  <li>trunk分支是经过严格测试的稳定分支，随时处于发布状态，并与线上代码一致；</li>
  <li>每个特性可以另开一个branch开发，等到稳定后再合入trunk发布；</li>
  <li>修复bug时也开一个branch开发，验证通过后再合入trunk发布。</li>
</ul>

<p>笔者采用这种传统的解决方案使用了一段时间，确实可以解决并行开发的问题，但是在实践中也发现了一些恼火的
问题：</p>

<ul>
  <li>一个潜在的风险是合入trunk，多个特性单独测试是ok的，一旦合入就容易引起bug，所以合入trunk后还得继续
测试；</li>
  <li>SVN操作比较复杂：建立分支，开发，合并trunk的更新，反向合入trunk，测试，提交trunk，删除branch。对于
新手来讲更容易出错，尤其是多人开发时需要解决冲突，严重影响效率。</li>
</ul>

<h2 id="feature-flag">使用feature flag</h2>

<p>要解决SVN操作复杂的问题就必须停止使用branch开发，只使用trunk。但是trunk又必须保持随时可以发布的状态。
这可以借助于灰度发布的思想解决，新特性若没开发完毕可以使其代码不生效，用户看不见，待到成熟后再上线，
这可以采用开关控制其是否上线，就像一个个模块一样，可要可不要。</p>

<p>我们可以为每个特性取一个名字，在配置文件中控制其是否上线：</p>

<pre><code>use-new-feature=true
</code></pre>

<p>然后在代码中这样判断：</p>

<pre><code>if (config-&gt;isFeatureLaunched("use-new-feature")) {
    // 新特性代码。
    ...
}
</code></pre>

<p>更进一步，开关出了打开和关闭这两种状态外还可以引入中间状态，进行灰度测试：</p>

<pre><code>use-new-feature=10%
</code></pre>

<p>意思是说对于10%的用户使用新特性，灰度测试新特性是否正常。并且在某些情况下如果出了紧急问题可以先用开
关关掉，提供有损服务。</p>

<p>引入feature flag后我们完全可以换个角度去看待特性开发。每个特性可以看成一个个独立的模块，可以上线也可
以下线，可从技术角度和业务角度决定是否上线，更好地降低了特性之间的耦合。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用MySql实现事务型消息队列]]></title>
    <link href="http://spockwangs.github.io/blog/2014/06/19/implement-transactional-queue-using-mysql/"/>
    <updated>2014-06-19T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2014/06/19/implement-transactional-queue-using-mysql</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>在离线数据处理系统中，为了解除模块之间的耦合关系，往往需要消息队列来实现模块之间的通信。对于离线系统来讲，消息队列要满足以下要求：</p>

<ul>
  <li>消息不能丢失，即使在系统失败的情况下。消息一旦被插入就一定会被至少处理一次（只被处理一次是最好的，但是实现起来有难度，所以只要求at-least-once semantic）；</li>
  <li>FIFO顺序；</li>
  <li>支持多生产者；</li>
  <li>支持多消费者。每个消息只能被其中一个消费者处理。
<!--more--></li>
</ul>

<h2 id="section">第一次尝试</h2>

<p>为了满足事务特性，最简单的做法就是用MySql数据库来实现这个队列。为了支持FIFO顺序，可以用MySql的自增ID来排序，先进入的消息ID要小些。MySql数据库是支持并发操作的，这就自动支持了多生产者的情况。为了支持多消费者并且每个消息只被一个消费者处理，可以为每个消费者分配一个ID，当某个消息正在被消费者处理时，这个消费者就被认为是这个消息的owner。</p>

<p>根据以上思路，构造表如下：</p>

<pre><code>CREATE TABLE message_queue (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  
  -- owner为NULL时表示消息未被处理；否则正在被某个消费者处理，其值就是这个消费者的ID
  owner VARBINARY(255),
  message VARBINARY(255) NOT NULL
);
</code></pre>

<p>其中<code>message</code>是跟业务相关的消息数据，可以是一个字段也可以是多个字段。那么enqueue操作如下：</p>

<pre><code>insert into message_queue (message) values ('a message');
</code></pre>

<p>dequeue操作有点复杂，分3步：</p>

<ol>
  <li>
    <p>获取未被处理的消息。先占有这些消息，设置owner。为了加快速度减少访问数据库的频率，可以批量操作；</p>

    <pre><code> update message_queue set owner='me' where owner is null limit 10;
</code></pre>

    <p>根据<a href="http://dev.mysql.com/doc/refman/5.0/en/mysql-affected-rows.html"><code>mysql_affected_rows()</code></a>的返回结果可以判断是否有未被处理的消息。若有，则取出消息：</p>

    <pre><code> select message from message_queue where owner='me';
</code></pre>

    <p>注意，<code>update</code>操作是根据自增ID的顺序操作的，这就实现了FIFO。若把这两步合并成一个事务执行会造成对表的锁占用过多时间（多了一个请求响应来回时间）。</p>
  </li>
  <li>处理消息，此时表不会被锁住，其它消费者也可以获取消息；</li>
  <li>
    <p>处理完毕后从数据库中删除。对于处理出错的消息可以根据业务要求重试、忽略或者插入消息队列待下次再处理。</p>

    <pre><code> delete from message_queue where owner='me'
</code></pre>
  </li>
</ol>

<p>上面没有考虑失败的情况。如果某个消费者在第1步和第2步之间失败的话，一个被占用的消息可能永远不会再被处理，即使此时有其它消费者还在运行，这就不满足at-least-once的要求了。</p>

<h2 id="section-1">考虑消费者失败的情况</h2>

<p>为了解决考虑消费者失败的情况，一个比较简单的方法就是对消费者进行监控（比如采用心跳），一旦失败就将其占有的但是还未删除的消息的<code>owner</code>设置成<code>null</code>。但是由谁来监控呢？容易想到的方法可能是单独建立一个服务对每个消费者进行监控，不过对于我们这里的简单问题不需要这么复杂，而且我本人不喜欢这种主从不对称的解决方案（毕竟谁来监控这个监控服务呢？）。我们可以让消费者相互监控。</p>

<p>每当消费者取消息时，如果发现有消息虽然被占用但是却长时间没有处理完毕，那么就认为该消息的<code>owner</code>失败了，这个消息就可以被占用。为了判断消息处理是否超时，增加一个字段表示该消息被处理的时间戳：</p>

<pre><code>CREATE TABLE message_queue (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  
  -- owner为NULL时表示消息未被处理；否则正在被某个消费者处理，其值就是这个消费者的ID
  owner VARBINARY(255),
  
  -- 最近一次被owner取出的时间
  dequeued_time DATETIME,
  message VARBINARY(255) NOT NULL
);
</code></pre>

<p><code>dequeue</code>的第1步的update操作改为如下（假设消息处理的耗时不超过60s）：</p>

<pre><code>update message_queue set owner='me',dequeued_time=NOW() 
    where owner is null or dequeued_time &lt; SUBTIME(NOW(), SEC_TO_TIME(60)) limit 10;
</code></pre>

<p>这样即使消费者A在第1步和第2步之间失败了，消费者B还可以重新取出该消息重新处理。所以只要还有消费者在，消息至少会被处理一次。</p>

<h2 id="section-2">如何实现只处理一次呢？</h2>

<p>如果消费者在第2步和第3步之间失败的话，这个消息就会被再次取出来处理一次，这样就一共处理了2次。要保证每个消息只被处理一次，也就是要保证第2步和第3步是一个原子操作，要么都做，要么都不做。换句话说，第2步和第3步要合并成一个事务操作，但是这两步涉及到的是两个不同的实体（一个视业务逻辑而定，一个是MySql数据库），用事务处理的概念来讲就是两个不同的resource manager，必须采用分布式事务协议（比如两步提交协议）才能实现事务语义，这已远超出本文的范围了，不在这里赘述。</p>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://blog.engineyard.com/2011/5-subtle-ways-youre-using-mysql-as-a-queue-and-why-itll-bite-you/">5-subtle-ways-youre-using-mysql-as-a-queue-and-why-itll-bite-you</a></li>
  <li><a href="https://www.rabbitmq.com/">RabbitMQ</a>是一个消息队列解决方案，毕竟用数据库实现只是权宜之计</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web应用开发中的几个问题]]></title>
    <link href="http://spockwangs.github.io/blog/2014/01/01/web-app-dev/"/>
    <updated>2014-01-01T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2014/01/01/web-app-dev</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>由于Ajax技术在Gmail中的成功应用和高性能的V8引擎的推出使得编写Web应用变得流行
起来，使用前端技术也可以编写具有复杂交互的应用。相对于native应用，Web应用具
有如下优点：</p>

<ul>
  <li>跨平台，开发和维护成本低；</li>
  <li>升级和发布方便，没有版本的概念，随时随地发布，用户没有感知，不需要安装；</li>
  <li>响应式设计(Responsive Design)使得Web应用可以跨平台，同一份代码自适应各种
屏幕大小</li>
  <li>即使最终不采用Web应用方案，也很适合开发原型
<!--more--></li>
</ul>

<p>当然，Web应用也不是没有缺点。由于不同平台和厂商的浏览器并不完全一样，跨平台
也有一些兼容成本。另外，Web应用的性能不如native应用，交互有时候不是很流畅，
再加上HTML5的API上的限制，使得有些功能采用Web应用不太合适。由于这些原因，结
合两者优点的混合方案变得流行起来（比如微信、手机QQ和手机QQ浏览器中会嵌入一
些Web页面）。</p>

<p>根据笔者的开发经验，下面总结一些Web应用开发过程中的要面临的几个问题。</p>

<h2 id="section">模块化编程</h2>

<p>模块化编程是编写大规模应用必不可少的一个特性，与其它主流的编程语言相比
Javascript没有对模块提供直接的支持，更不用说维护模块之间的依赖关系，这使得维
护Javascript代码变得异常困难，在<code>&lt;script&gt;</code>标签中包含代码的顺序需要人工维护。</p>

<p>要支持模块化编程必须解决两个问题：</p>

<ol>
  <li>支持编写模块并为模块命名，防止名字冲突和全局变量的使用；</li>
  <li>支持显示指定模块之间的依赖关系，并在程序执行时自动加载依赖的模块。</li>
</ol>

<p>Douglas Crockford在”Javascript: The Good Parts”一书中提出的Module Pattern利
用Javascript的闭包技术来模拟模块的概念，防止名字冲突和全局变量的使用。这解
决了第一个问题。</p>

<pre><code>var moduleName = function () {
    // Define private variables and functions
    var private = ...

    // Return public interface.
    return {
        foo: ...
    };
}();
</code></pre>

<p>为了解决第二个问题<a href="http://www.commonjs.org/">CommonJS</a>组织定义了
<a href="http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition">AMD规范</a>方便
开发者显示指定模块之间的依赖关系，并在需要时加载依赖的模块。
<a href="http://requirejs.org/">RequireJS</a>是AMD规范的一个比较流行的实现。</p>

<p>首先我们在<code>a.js</code>中定义模块<code>A</code>.</p>

<pre><code>define(function () {
    return {
        color: "black",
        size: 10
    };
});
</code></pre>

<p>然后定义模块<code>B</code>依赖模块<code>A</code>.</p>

<pre><code>define(["a"], function (A) {
    // ...
});
</code></pre>

<p>当模块<code>B</code>执行时RequireJS保证模块<code>A</code>已被加载。具体细节可参考RequireJS官方文
档。</p>

<h2 id="section-1">脚本加载</h2>

<p>最简单的脚本加载方式是放在<code>&lt;head&gt;</code>加载。</p>

<pre><code>&lt;head&gt;
  &lt;script src="base.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="app.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
</code></pre>

<p>其缺点是：</p>

<ol>
  <li>加载和解析是顺序是同步执行的，先下载<code>base.js</code>然后解析和执行，然后再下载
<code>app.js</code>；</li>
  <li>加载脚本时还会阻塞对<code>&lt;script&gt;</code>之后的DOM元素的渲染。</li>
</ol>

<p>为了缓解这些问题，现在的普遍做法是将<code>&lt;script&gt;</code>放在<code>&lt;body&gt;</code>的底部。</p>

<pre><code>  &lt;script src="base.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="app.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p>但并不是所有的脚本都可以放在<code>&lt;body&gt;</code>的底部，比如有些逻辑要在页面渲染时执行，
不过大多数脚本没有这样的要求。</p>

<p>将脚本放在<code>&lt;body&gt;</code>底部仍然没有解决顺序下载的问题，一些浏览器厂商也意识到了
这个问题并开始支持异步下载。HTML5也提供了标准的解决方案：</p>

<pre><code>&lt;script src="base.js" type="text/javascript" async&gt;&lt;/script&gt;
&lt;script src="app.js" type="text/javascript" async&gt;&lt;/script&gt;
</code></pre>

<p>标上<code>async</code>属性的脚本表明你没有在里面使用<code>document.write</code>之类的代码。浏览器
将异步下载和执行这些脚本，并且不会阻止DOM树的渲染。但是这会导致另一个问题：
由于是异步执行，<code>app.js</code>可能在<code>base.js</code>之前执行，如果它们之间有依赖关系这将
导致错误。</p>

<p>讲到这里从开发者角度来看我们其实需要的是这些特性：</p>

<ol>
  <li>异步下载，不要阻塞DOM的渲染；</li>
  <li>按照模块的依赖关系解析和执行脚本。</li>
</ol>

<p>所以脚本的加载其实需要与模块化编程问题结合起来解决。RequireJS不仅记录了模
块之间的依赖关系，并且提供了根据依赖关系的按需加载和执行（详情请参考
RequireJS官方文档）。</p>

<p>关于脚本加载的更多方案请看
<a href="http://www.html5rocks.com/en/tutorials/speed/script-loading/?redirect_from_locale=zh">这里</a>.</p>

<h2 id="section-2">静态资源文件的部署</h2>

<p>这里的静态资源文件是指CSS、Javascript和CSS需要的一些图片文件。它们的部署需
要考虑两个问题：</p>

<ol>
  <li>下载速度</li>
  <li>版本管理</li>
</ol>

<p>静态资源文件的一个特点变化不频繁，且与用户身份无关（即与Cookie无关），因此
很适合缓存。另一方面，一旦静态资源文件变化时，浏览器必须从Web服务器下载最新
的版本。当发布新版本的Web应用时，并不是所有用户马上就用上新版本，老版本和新
版本将会共存，这就涉及到版本匹配问题。老版本的应用需要下载老版本的CSS和
Javascript，新版本的应用需要下载新版本的静态资源。</p>

<ol>
  <li>为了防止版本不一致，每当发布新版本的应用时静态资源文件都需要改名，让旧的
HTML引用旧的静态文件，新的HTML引用新的静态文件。一个常见办法就是在文件名
中加时间戳；</li>
  <li>为了防止悬挂引用，资源文件应该比HTML先发布。</li>
</ol>

<p>上述方案可以解决版本问题，这样每个静态文件的缓存时间可以设置得任意大，防止
重复下载，同时在新版本发布时浏览器将及时更新。</p>

<p>为解决下载速度问题，可以考虑以下几个方案：</p>

<ol>
  <li>合并静态文件以免文件数量过多，过多的文件需要更多的连接来下载，浏览器通常
对同一个域名的连接数量有限制；</li>
  <li>压缩静态文件；为了可读性，CSS和Javascript通常有很多空行、缩进和注释，这
些在发布时都可以去掉；</li>
  <li>静态文件通常与Cookie没有关系，所以为了减小传输大小和增加缓存命中率（缓存
的key需要考虑Cookie），静态文件最好托管在没有Cookie的域名上；</li>
</ol>

<p>最后也是最重要的，要使上述过程自动化。</p>

<h2 id="mvc">MVC编程模型</h2>

<p>Web应用采用的是事件驱动编程模型，与native应用是一样的，区别仅在于基础设施提
供的API不一样。UI编程通常采用MVC设计模式，以流行的
<a href="http://backbonejs.org/">Backbone.js</a>为例包括如下部分：</p>

<ol>
  <li>Model
    <ul>
      <li>数据的唯一来源</li>
      <li>负责获取和存储数据</li>
      <li>可提供缓存机制</li>
      <li>数据变化时通过事件通知其它对象</li>
    </ul>
  </li>
  <li>View
    <ul>
      <li>负责渲染</li>
      <li>监听UI事件和Model事件并重绘UI</li>
      <li>渲染结果取决于两类数据：Model和UI交互状态</li>
      <li>UI的交互状态通常存在View对象中，有时候为了方便也存在DOM树节点中</li>
      <li>为了降低渲染成本，尽量减少需要渲染的区域，每次当数据变化时只渲染受影响
的区域</li>
    </ul>
  </li>
  <li>Router
    <ul>
      <li>负责监听URL的变化，并通知相应的View对象渲染页面</li>
    </ul>
  </li>
</ol>

<p>为了有效地使用MVC，有几个问题需要注意。</p>

<h3 id="modelview">Model应与View完全隔离</h3>

<p>Model仅提供数据的访问，不应该依赖View，因此Model不应该知道View的存在。所以
Model不能持有对任何View对象的引用。Model的数据发生变化时只能通过事件通知
View.</p>

<h3 id="viewui">View在初始化时采用委派方式监听UI事件</h3>

<p>这里有两个关键点：</p>

<ol>
  <li>
    <p>在初始化时监听事件</p>

    <p>var View = Backbone.View.extend({
     initialize: function () {
         this.$el.on(‘click’, ‘#id’, function () {
             // …
         });
     }
 });</p>
  </li>
</ol>

<p>除了一些特殊情况外（请看下文），所有UI事件都应该在View初始化时初始化，防止同
一个事件被绑定多次。即使有些事件是动态监听的（有时候需要监听，有时候有不需要
监听，比如有些按钮有时候是有效的，有时候又无效），也需要在初始化时监听，然后
在事件回调函数里判断是否需要处理。这样逻辑更简单，更容易维护。</p>

<ol>
  <li>采用委派方式监听UI事件</li>
</ol>

<p>关于委派方式监听请参考<a href="http://api.jquery.com/on/">jQuery文档</a>.</p>

<p>上面已强调要在初始化时监听事件，但是初始化时需要监听的DOM节点可能还不存在，
所以没法直接绑定事件，只能采用委派方式。不过采用委派方式要求事件可以冒泡。</p>

<p>对于那些没法冒泡的事件（比如<code>&lt;img&gt;</code>的<code>load</code>事件）只能在保证其存在的情况下直
接绑定，而不一定要在初始化时绑定。</p>

<h3 id="view">复杂的View组织成树形层次结构</h3>

<p>函数太大了需要拆分成几个子函数。同样，View的逻辑如果过于复杂也应根据页面结
构拆成几个子View：</p>

<ol>
  <li>父View通过引用访问子View，但是子View不应该持有父View的引用；</li>
  <li>子View只负责自己区域的渲染，其它区域由父View负责渲染；</li>
  <li>父View通过函数调用访问子View的功能，子View通过事件与父View通信；</li>
  <li>子View之间不能直接通信。</li>
</ol>

<p>其它技巧可查看
<a href="http://coding.smashingmagazine.com/2013/08/09/backbone-js-tips-patterns/">Backbone技巧与模式</a>.</p>

<h2 id="section-3">离线应用缓存</h2>

<p>为使Web应用体验更加流畅，可考虑使用HTML5离线应用缓存，不过有以下几点需要注
意：</p>

<ol>
  <li>不要将离线应用缓存与HTTP缓存机制搞混淆，前者是HTML5引入的新特性，与HTTP缓
存机制是相互独立并存的；</li>
  <li>Cache manifest文件不应被HTTP缓存太久（通过HTTP头<code>Cache-Control</code>控制缓存
时间），否则发布新版后浏览器不会及时监测到变化并下载新文件；</li>
  <li>在Cache manifest文件的<code>NETWORK</code>节放一个<code>*</code>，否则没有列在这个文件的资源不
会被请求；</li>
  <li>不适合缓存的请求最好都放在<code>NETWORK</code>节；</li>
  <li>如果之前使用过离线应用缓存现在不想再使用了，从<code>&lt;html&gt;</code>删除<code>manifest</code>属性，
并发送404响应给manifest文件请求。仅仅删除<code>manifest</code>属性是没有效的。</li>
</ol>

<h2 id="section-4">线上错误报告</h2>

<p>Javascript是一个动态语言，许多检查都是在运行时执行的，所以大多数错误只有执
行到的时候才能检查到，只能在发布前通过大量测试来发现。即使这样仍可能有少数
没有执行到的路径有错误，这只能通过线上错误报告来发现了。</p>

<pre><code>window.onerror = function (errorMsg, fileLoc, linenumber) {
    var s = 'url: ' + document.URL + '\nfile:  ' + fileLoc
        + '\nline number: ' + linenumber
        + '\nmessage: ' + errorMsg;
    Log.error(s);       // 发给服务器统计监控
    console.log(s);
};
</code></pre>

<p>通常线上的Javascript都是经过了合并和压缩的，上报的文件名和行号基本上没法对
应到源代码，对查错帮助不是很大。不过最新版的Chrome支持在<code>onerror</code>的回调函数
中获取出错时的栈轨迹：<code>window.event.error.stack</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年学到了什么]]></title>
    <link href="http://spockwangs.github.io/blog/2013/12/24/what-i-learned-in-2013/"/>
    <updated>2013-12-24T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2013/12/24/what-i-learned-in-2013</id>
    <content type="html"><![CDATA[<ol>
  <li>不要思考现有技术能做什么，而要思考你真正需要什么，然后再想办法用现有技术
做出来。即使现有技术做不出来也不要紧，可以做一个接近目标的。不要让现有技术束
缚了你的思维。
<!--more--></li>
  <li>
    <p>一个模式只有在至少3个不同地方遇到后才能搞明白它到底是什么，然后将其抽象
出来复用。</p>
  </li>
  <li>
    <p>答应去做的事情一定要全身心投入去做，否则就不要答应。免得别人不满意，自己
也不高兴，浪费大家的时间。</p>
  </li>
  <li>
    <p>控制情绪的最好方法就是只讲事实不讲自己的猜测，而这恰恰极难做到。</p>
  </li>
  <li>
    <p>开发软件有两种方法：一个是容易的，一个是简单的。容易的方法一开始看起来效
率很高，但是随着时间推移软件的复杂性与日俱增以致不可控，开发效率逐渐降低。
简单的方法一开始效率很低，几乎毫无进展，但是一旦取得突破定好架构开发效率将与
日俱增，复杂性得到驯服。见<a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple Made
Easy</a>.</p>
  </li>
  <li>一旦找到合适的计算模型任何编程难题都迎刃而解。 “Point of view is worth
80 IQ points.” – Alan Kay</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Idioms]]></title>
    <link href="http://spockwangs.github.io/blog/2013/06/10/cpp-idioms/"/>
    <updated>2013-06-10T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2013/06/10/cpp-idioms</id>
    <content type="html"><![CDATA[<h2 id="pimpl-idiom">Pimpl idiom</h2>

<p><strong>Declare the constructor and destructor in the header file and define them
  in the source file when using Pimpl idiom, even if they are empty.</strong>
<!--more--></p>

<p>Consider the following code.</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="c1">// pimpl.h</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Impl</span><span class="p">;</span>    <span class="c1">// forward declaration</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Pimpl</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line"><span class="n">Pimpl</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// The destructor is not declared, so the compiler will generate one.</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line"><span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">Impl</span><span class="o">&gt;</span> <span class="n">m_impl</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="c1">// pimpl.cc</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Impl</span> <span class="p">{</span>
</span><span class="line"> <span class="c1">// ...</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="n">Pimpl</span><span class="o">::</span><span class="n">Pimpl</span><span class="p">()</span>
</span><span class="line"><span class="o">:</span> <span class="n">m_impl</span><span class="p">(</span><span class="k">new</span> <span class="n">Impl</span><span class="p">)</span>
</span><span class="line"><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>
<p>If you do not declare the destructor the compiler will generate one in
every translation unit that includes <code>impl.h</code>, which will call
the destructor of member variables, that is, the destructor
of <code>m_impl</code> which requires the complete definition
of <code>Impl</code>. But the whole purpose of Pimpl idiom is to hide the
definition of <code>Impl</code>. To solve this problem you should declare
the destructor in the header file to prevent the compiler from generating
one, and define it in the source file. Then only the <code>impl.cc</code> requires the
complete definition of <code>Impl</code>. Other translation units just
call <code>Pimpl</code>’s destructor as an external function, so they don’t
need to generate it.</p>

<h2 id="prefer-anonymous-namespace-functions-to-class-static-functions">Prefer anonymous namespace functions to class static functions.</h2>

<p>When you are implementing a class’s interface, you may need some helper
functions which has no relation with the private (member or static)
data. You can either declare the helper functions as the private static
functions in the class header file, or as the anonymous namespace functions
in the class source file.</p>

<p>Since it does not need to access the private data, the helper function
should be kept out of the class definition to make them loosely
coupled. And it is the implementation’s details, which we don’t want the
client of the class see it. So if we can put it outside the header file, we
should do it. If we put it in the header file, every time the
implementation changes the client using this class has to be
re-compiled. So we should put the implementation details outside of the
class header file as much as possible.</p>

<h2 id="pass-read-only-arguments-by-const-reference-and-read-write-arguments-by-value">Pass read-only arguments by const reference, and read-write arguments by value</h2>

<p>If the argument is intended to be read only in the function body, and</p>

<ol>
  <li>if its size is bigger than the pointer type pass it by const-reference,</li>
  <li>otherwise, pass it by value</li>
</ol>

<p>to avoid unnecessary copy.  That means values of class objec type should be
passed by const-reference, and values of the small types like the basic
types should be passed by value.  If the smaller ones were passed by const
reference another pointer indirection cost would have been incurred in
addition to the pointer copying cost when reading their values.</p>

<p>If the argument is intended to be modifed in the function body, it is
recommended to pass it by value instead of passing it by reference and
making a copy in the function body.</p>

<p>Consider the following code.</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">sorted</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">names</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">);</span>
</span><span class="line"><span class="k">return</span> <span class="n">names</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// names is an lvalue; a copy is required so we don&#39;t modify names</span>
</span><span class="line"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">sorted_names1</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span> <span class="n">names</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// get_names() is an rvalue expression; we can omit the copy!</span>
</span><span class="line"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">sorted_names2</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span> <span class="n">get_names</span><span class="p">()</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
<p>If the argument passed is an lvalue a copy is required.  But if the
argument is an rvalue the copy can be optimized out by the compiler.</p>

<p>See <a href="http://cpp-next.com/archive/2009/08/want-speed-pass-by-value/">“Want Speed? Pass by
Value”</a> for
more details.</p>

<h2 id="dont-worry-about-returnning-by-value">Don’t worry about returnning by value</h2>

<p>Many modern C++ compilers provide the Return Value Optimization to elide
the copy when returnning value.</p>

<p>Consider the following code.</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getName</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// do stuff to `name`</span>
</span><span class="line">
</span><span class="line"><span class="k">return</span> <span class="n">name</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">getName</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>
<p>Actually the signature of <code>getName()</code> is translated by the compiler to</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="kt">void</span> <span class="nf">getName</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">// do stuff to `*p`</span>
</span><span class="line">    <span class="c1">// not necessary to copy when returnning</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>The caller allocates space for the return value on the stack, and pass the
address of the space to the callee. Then the callee construct the return
value directly in that space, which elimiates a copy from inside to
outside. So we should no worry about the copy cost when returnning a big
object from a function, and the signature is more satisfactory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[哈佛训戒]]></title>
    <link href="http://spockwangs.github.io/blog/2013/04/13/havard_admonishment/"/>
    <updated>2013-04-13T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2013/04/13/havard_admonishment</id>
    <content type="html"><![CDATA[<ol>
  <li>
    <p>此刻打盹，你将做梦；而此刻学习，你将圆梦。
<!--more--></p>
  </li>
  <li>我荒废的今日，正是昨日殒身之人祈求的明日。</li>
  <li>觉得为时已晚的时候，恰恰是最早的时候。</li>
  <li>勿将今日之事拖到明日。</li>
  <li>学习时的苦痛是暂时的，未学到的痛苦是终生的。</li>
  <li>学习这件事，不是缺乏时间，而是缺乏努力。</li>
  <li>幸福或许不排名次，但成功必排名次。</li>
  <li>学习并不是人生的全部。但是既然连人生的一部分——学习也无法征服，还能做什么呢？</li>
  <li>请享受无法回避的痛苦。</li>
  <li>只有比别人更早、更勤奋地努力，才能尝到成功的滋味。</li>
  <li>谁也不能随随便便成功，它来自彻底的自我管理和毅力。</li>
  <li>时间在流逝。</li>
  <li>现在淌的哈喇子，将成为明天的眼泪。</li>
  <li>狗一样地学，绅士一样地玩。</li>
  <li>今天不走，明天要跑。</li>
  <li>投资未来的人是，忠于现实的人。</li>
  <li>教育程度代表收入。</li>
  <li>一天过完，不会再来。</li>
  <li>即使现在，对手也不停地翻动书页。</li>
  <li>没有艰辛，便无所获。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Booch方法进行面向对象分析与设计]]></title>
    <link href="http://spockwangs.github.io/blog/2013/03/30/object-oriented-analysis-and-design/"/>
    <updated>2013-03-30T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2013/03/30/object-oriented-analysis-and-design</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Brian Kernighan在_<a href="http://www.amazon.com/Software-Tools-Brian-W-Kernighan/dp/020103669X">Software Tools</a>_一书中表达了这样的观点：“编程的本质就是控制
复杂性”。正是软件的复杂性导致了大量软件项目的失败、延期或者超出预算，甚至带
来巨大灾难。纵观整个编程方法学和软件工程的发展历程，无不是在为驯服软件的复
杂性而努力。如果把眼光不仅仅是局限在软件领域，我们发现其它领域也一样表现出巨
大的复杂性，例如，跟软件密切联系的硬件领域，生物，人体构造，物质结构和社会
组织等。自然界到处充斥着极其复杂的对象，但是软件的复杂性与自然界的复杂性不
一样，正如Brooks所说：
<!--more--></p>

<blockquote>
  <p>Einstein argued that there must be simplified explanations of nature,
because God is not capricious or arbitrary. No such faith comforts the
software engineer. Much of the complexity that he must master is arbitrary
complexity.</p>
</blockquote>

<p>面向对象的编程方法正是为应对软件复杂性而提出的目前最流行的方法。面向对象编程
语言也因此变得极为流行，但是会流利地使用面向对象编程语言并不代表你会使用面向
对象的编程方法。是否采用了面向对象的编程方法跟是否使用面向对象的编程语言是毫
无关系的，只不过面向对象编程语言提供的特性使得面向对象软件构造变得更为容易。
即使使用非面向对象的语言如C语言也一样可以进行面向对象编程。
在_<a href="http://www.amazon.com/Object-Oriented-Analysis-Design-Applications-3rd/dp/020189551X">Object-oriented Analysis and Design with Applications</a>_一书中，
Grady Booch将面向对象编程定义为：</p>

<blockquote>
  <p>Object-oriented programming is a method of implementation in which
programs are organized as cooperative collections of objects, each of
which represents an instance of some class, and whose classes are all
members of a hierarchy of classes united via inheritance relationships.</p>
</blockquote>

<p>面向对象编程的先驱Alan Kay这样<a href="http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en">定义面向对象编程</a>：</p>

<blockquote>
  <p>OOP to me means only messaging, local retention and protection and hiding
of state-process, and extreme late-binding of all things.</p>
</blockquote>

<p>Alan Kay关于面向对象编程的定义最核心的是对象间的消息通信，就如同人与人之间
的交流一样。一个团队或组织的成员之间相互交流沟通一起合作完成一定的任务，其
实就是一个面向对象的系统，而这正是我们每天要参与其中的事情，我们每个人就在
扮演一个对象的角色，这也难怪面向对象编程的思想即使对于不懂计算机的人来讲仍
然是非常直观的。</p>

<h2 id="section">如何进行面向对象分析与设计</h2>

<p>有许多人曾经将编程与写作进行类比，因为编程并不太像其它工程学科，编写优秀的
程序需要一定的创造性，并没有什么套路可供遵循。因此，面向对象的分析与设计过
程也无法像菜谱一样精确描述，但是我们仍然可以提供一套经验指南。</p>

<p>Grady Booch将面向对象的分析与设计定义为一系列迭代过程，每个迭代包括如下过程：</p>

<ol>
  <li>需求分析：分析用户的需求，定义问题的范畴。</li>
  <li>分析与设计：设计系统的架构和实现机制，即定义类和对象及其之间的关系。</li>
  <li>实现：实现、单元测试并与已有设计集成，形成一个可供执行的系统。</li>
  <li>测试：集成测试以保证满足了系统需求。</li>
  <li>部署：部署已实现的系统以供客户使用。</li>
</ol>

<p>每次迭代的侧重点不一样，根据其侧重点的不同每个迭代处于不同的阶段：</p>

<ol>
  <li>Inception：对客户的需求进行分析，确定问题的边界和范畴，哪些需要解决，哪
些不需要解决。对需求排出优先级并确定核心需求。确定开发环境和理解风险。</li>
  <li>Elaboration: 这个阶段的主要目标是设计出稳定的系统架构。架构的设计需要考
虑到满足相互冲突的需求之间的权衡，优先考虑核心需求。</li>
  <li>Construction: 这个阶段的目标是构造一个可供测试的系统。</li>
  <li>Transition: 这个阶段的目标是确保软件可被客户接受，保证易用性。</li>
</ol>

<p>这些就是Booch所说的宏观过程，可以看出与一些流行的敏捷开发过程很相似。</p>

<p>宏观过程中的“分析与设计”又进一步分解为下面的微观过程：</p>

<ol>
  <li>Identify the elements: 找出需要哪些对象。一些对象可以从问题领域所用的术
语中寻找，一些对象需要在设计过程中发明出来，这正是需要创造性的地方。</li>
  <li>Define the collaborations between the elements: 定义对象的行为及其之间的
合作关系。分析需求场景，为每个对象分配责任，定义它们之间的合作关系，并注
意寻找行为的共同点和相似性，将其抽象出来以便复用。</li>
  <li>Define the relationships between the elements: 识别对象间的语义关系，并细化这种关系（语义依赖、聚合关系、继承关系）。</li>
  <li>Define the semantics of the elements: 细化每个对象的责任，明确其接口。</li>
</ol>

<p>注意上述过程不一定要按上面描述的顺序进行，也不一定要严格分开。</p>

<p>如果上述过程有点抽象难懂，我们可以将其与团队管理相类比进行理解。比如，为了完成某个任务，
仅凭你一个人是不够的。你需要自己筹建一个团队通过成员的合作来完成这个任务。
你首先要考虑需要什么样的人（identify the elements)，每个人需要什么技能，招
聘广告怎么写（define the collaborations between the elements）。招到你需要
的人后要给讲清楚他们之间的关系（哪些人可以与哪些人沟通，哪些人向哪些
人汇报工作，哪些人之间是平级关系，哪些人是上下级关系等等）（define the
relationships between the elements)，并详细规定他们各自的责任和义务，哪些可以做，哪些
不可以做（define the semantics of the elements)。这个场景也折射出一些设计原
则。比如分配责任时要避免过于集中，每个人都应该只负责某一个方面，以发挥出其
优势，这不就是著名的“Single Responsiblity Principle”吗。成员之间需要的沟通
路径要尽可能少，如果任何两个成员都需要沟通才能完成任务，则会浪费大量的时间
和精力，导致效率低下。如果任何两个对象都有关联，这个架构也就够乱的，完全没
有结构可言，理解起来也很困难。如果这个团队的任务越来越多，人手不够就需要继
续招人，人一多沟通路径就必然会增加，管理将变的更困难，效率必然下降，这时就
需要分离出一些独立的小组，行成一个层次关系，以方便管理。</p>

<h2 id="section-1">面向对象与并发和分布式计算</h2>

<p>随着多核处理器的普及，并发编程变得日益重要。但是并发编程往往涉及到管理线程
和保护共享状态，容易出错。面向对象的消息通信机制有效解决这个问题。我们可以
用对象将控制流抽象出来，这样的对象称为active object，其它对象叫做passive
object. 不同的active object可以并发执行并通过消息传递来同步，他们之间没有共
享状态，大大减轻了程序员的负担。</p>

<p>为了减轻并发编程的痛苦，也出现了一些其它的编程模型，比较著名的有Tony Hoare的
<a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">Communicating Sequential Process</a>和Carl Hewitt等人提出的<a href="http://en.wikipedia.org/wiki/Actor_model">Actor
Model</a>，不过它们都大同小异，都是通过某个实体（CSP中的Process，
Actor Model中的Actor）是将控制流抽象出来并通过消息通信机制来同步以避免共享状
态。</p>

<p>面向对象编程还可以用于分布式计算，只不过这时active object分布在不同的计算机
上，通过网络相互通信。</p>

<h2 id="references">References</h2>

<ul>
  <li>Brian W. Kernighan, P. J. Plauger, <em><a href="http://www.amazon.com/Software-Tools-Brian-W-Kernighan/dp/020103669X">Software Tools</a></em>.</li>
  <li>Grady Booch, <em><a href="http://www.amazon.com/Object-Oriented-Analysis-Design-Applications-3rd/dp/020189551X">Object-Oriented Analysis and Design with Applications</a></em>, Second Edition.</li>
  <li><a href="http://en.wikipedia.org/wiki/Actor_model">Actor Model</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">Communicating Sequential Process</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Mysql客户端、连接和服务器字符集]]></title>
    <link href="http://spockwangs.github.io/blog/2013/03/14/mysql-character-set/"/>
    <updated>2013-03-14T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2013/03/14/mysql-character-set</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Mysql在客户端与服务器交互时涉及到几个字符集和collation的转换问题：</p>

<ul>
  <li>
    <p>客户端发给服务器的查询语句的字符集是什么？</p>

    <p>客户端发给服务器的语句的字符集由系统变量<a href="http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_character_set_client">character_set_client</a>定义。
<!--more--></p>
  </li>
  <li>
    <p>服务器收到查询语句后会转换成什么字符集？</p>

    <p>服务器将收到的查询语句从<a href="http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_character_set_client">character_set_client</a>转换为
<a href="http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_character_set_connection">character_set_connection</a>，除非字符串常量显式指定了字符集。系统变量
<a href="http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_collation_connection">collation_connection</a>定义了字符串常量的collation.</p>
  </li>
  <li>
    <p>服务器返回给客户端的数据的字符集 是什么？</p>

    <p>服务器返回给客户端的数据字符集由系统变量[character_set_results][character_set_results]定义。</p>
  </li>
  <li>
    <p>服务器采用什么字符集存储数据？</p>

    <p>Mysql中<a href="http://dev.mysql.com/doc/refman/5.5/en/string-types.html">字符串类型</a>有两种。对于非二进制字符串类型（<code>char</code>,
<code>varchar</code>和<code>text</code>）采用建表时指定的字符集存储，对于二进制类型的数据（<code>binary</code>, <code>varbinary</code>, <code>blob</code>, <code>tinyblob</code>,
<code>mediumblob</code>等类型的数据）采用<a href="http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_character_set_connection">character_set_connection</a>定义的字符集所映射的二进制值存储，注
意这些类型本身是没有字符集的。</p>
  </li>
</ul>

<p>上面这些系统变量均是<a href="http://dev.mysql.com/doc/refman/5.0/en/using-system-variables.html">会话变量</a>，改变它们的值不会影响其它客户端与服务器的连接。</p>

<h2 id="section">如何设置字符集</h2>

<p>我们通常用<code>set names</code>语句设置连接相关的字符集。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mysql&gt; set names 'charset_name' [collate 'collation_name']</span></code></pre></td></tr></table></div></figure>
<p>等价于</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mysql&gt; set character_set_client = 'charset_name'
</span><span class="line">mysql&gt; set character_set_results = 'charset_name'
</span><span class="line">mysql&gt; set character_set_connection = 'charset_name'</span></code></pre></td></tr></table></div></figure>
<p>## 如何查看设置的字符集</p>

<p>可以这样查看设置的系统变量</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mysql&gt; show variables like 'character_set%';
</span><span class="line">+--------------------------+---------------------------------------+
</span><span class="line">| Variable_name            | Value                                 |
</span><span class="line">+--------------------------+---------------------------------------+
</span><span class="line">| character_set_client     | latin1                                | 
</span><span class="line">| character_set_connection | latin1                                | 
</span><span class="line">| character_set_database   | latin1                                | 
</span><span class="line">| character_set_filesystem | binary                                | 
</span><span class="line">| character_set_results    | latin1                                | 
</span><span class="line">| character_set_server     | latin1                                | 
</span><span class="line">| character_set_system     | utf8                                  | 
</span><span class="line">| character_sets_dir       | /data/mysql_root/base/share/charsets/ | 
</span><span class="line">+--------------------------+---------------------------------------+
</span><span class="line">8 rows in set (0.00 sec)</span></code></pre></td></tr></table></div></figure>
<p>## References</p>

<ul>
  <li><a href="http://dev.mysql.com/doc/refman/5.5/en/charset-connection.html">关于连接字符集</a>.</li>
  <li><a href="http://dev.mysql.com/doc/refman/5.0/en/using-system-variables.html">关于Mysql的两种系统变量</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Best Practice]]></title>
    <link href="http://spockwangs.github.io/blog/2013/03/13/css-best-practice/"/>
    <updated>2013-03-13T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2013/03/13/css-best-practice</id>
    <content type="html"><![CDATA[<h2 id="use-a-reset-styelsheet">Use a reset styelsheet</h2>

<p>Reset规则可以消除不同浏览器的差异，比较流行的reset规则有<a href="http://meyerweb.com/eric/tools/css/reset/index.html">Meyer Reset</a>和<a href="http://developer.yahoo.com/yui/reset/">Yahoo Reset</a>.
<!--more--></p>

<h2 id="categorize-css-rules">Categorize CSS Rules</h2>

<p>将样式规则分类，不同类型的样式采用不同的CSS规则描述，以方便阅读、理解和复用，
见<a href="http://smacss.com/book/">Scalable and Modular Architecture for CSS</a>.</p>

<h2 id="use-object-oriented-css">Use Object-Oriented CSS</h2>

<p>面向对象的CSS的两条基本原则是：</p>

<ul>
  <li>将结构和皮肤分开</li>
  <li>将容器和内容分开</li>
</ul>

<p>遵循面向对象的原则可以使代码更加模块化和可重用。见<a href="https://github.com/stubbornella/oocss/wiki">OOCSS</a>.</p>

<h2 id="use-margin-0-auto-to-center-layouts">Use “margin: 0 auto” to Center Layouts</h2>

<p>Inline元素用<code>text-align: center</code>居中对齐，但是block元素没有对应的CSS属性。</p>

<h2 id="use-text-transform">Use Text-transform</h2>

<p><code>text-transform</code>有以下几个属性：</p>

<ul>
  <li>capitalize: 每个单词的首字母大写</li>
  <li>uppercase: 全部大写</li>
  <li>lowercase: 全部小写</li>
</ul>

<h2 id="use-em-as-the-unit-of-font-size">Use em as the unit of font size</h2>

<p>See <a href="http://webdesign.about.com/cs/typemeasurements/a/aa042803a.htm">http://webdesign.about.com/cs/typemeasurements/a/aa042803a.htm</a>.</p>

<h2 id="understanding-css-selector-performance">Understanding CSS selector performance</h2>

<p>复杂的CSS选择符会使浏览器耗用更多的时间计算一条CSS规则是否匹配一个元素，因
此为了让浏览器更快地渲染页面我们应该使用仅可能简单的选择符。</p>

<ol>
  <li>使用单个选择符；</li>
  <li>使用子选择符；</li>
  <li>避免使用常见的标签名作选择符。</li>
</ol>

<p>See <a href="http://smacss.com/book/selectors">“Selector Performance”</a>, and
<a href="https://developer.mozilla.org/en-US/docs/CSS/Writing_Efficient_CSS">“Writing Efficient CSS”</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySql Help]]></title>
    <link href="http://spockwangs.github.io/blog/2012/05/16/mysql-help/"/>
    <updated>2012-05-16T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2012/05/16/mysql-help</id>
    <content type="html"><![CDATA[<h2 id="backup-and-recovery">Backup and Recovery</h2>

<p>Use following command to backup an InnoDB table</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mysqldump -u username -p password --default-character-set=utf8 
</span><span class="line">    --single-transaction db_name table_name &gt; db_name-table_name-backup.sql</span></code></pre></td></tr></table></div></figure>
<p>If you want to backup the whole database you just omit the table name. And
then use the following command to recover the table.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mysql -u username -p password db_name-table_name-backup.sql</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNU Tool Chain]]></title>
    <link href="http://spockwangs.github.io/blog/2012/05/14/gnu-tool-chain/"/>
    <updated>2012-05-14T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2012/05/14/gnu-tool-chain</id>
    <content type="html"><![CDATA[<h2 id="create-static-libraries">Create Static Libraries</h2>

<p>To compile source files</p>

<pre><code>$ gcc -c file1.c file2.c ...
</code></pre>

<p>To create archives</p>

<pre><code>$ ar r lib&lt;sth&gt;.a file1.o file2.o ...
</code></pre>

<p>See <code>ar(1)</code>.
<!--more--></p>

<h2 id="link-with-static-libraries">Link with Static Libraries</h2>

<pre><code>$ gcc -static -o outputfile file1.c file2.c -L&lt;search path&gt; -l&lt;archive name&gt;
</code></pre>

<p>Use option <code>-static</code> to avoid linking against shared libraries.  Use option
<code>-l</code> to specify which libraries are required and <code>-L</code> to specify where to find
these libraries.  If the required libraries are in system paths (i.e. <code>/lib</code>
and <code>/usr/lib</code>) <code>-L</code> is not required because the linker will search the system
path by default.  The paths are searched in the following order:</p>

<ol>
  <li>The paths specified by <code>-L</code> and by <code>SEARCH_DIR</code> command in the link script (not the default link
script, but the one specified by <code>-T</code>) in the command line from left to right;</li>
  <li>The paths specified by <code>SEARCH_DIR</code> command in the default link script if it is not yet replaced
by the <code>-T</code> option.</li>
</ol>

<p>The contents of the default link script can be printed by using <code>--verbose</code> option to <code>ld</code>.</p>

<p>See <code>-L</code>, <code>-T</code> and <code>-dT</code> in <code>ld(1)</code>.</p>

<h2 id="how-linkers-use-static-libraries-to-resolve-references">How Linkers Use Static Libraries to Resolve References</h2>

<p>See Section 7.6.3 of Computer Systems: A Programmer’s Perspective.</p>

<p>Watch out for mutual dependences and cyclic dependences of the static libraries.  See option <code>--start-group</code> of <code>ld(1)</code>.</p>

<h2 id="create-shared-libraries">Create Shared Libraries</h2>

<pre><code>$ gcc -shared -fpic -o somename.so file1.c file2.c ... dependent_shared_libraries
</code></pre>

<p>The dependent shared libraries will be stored in the .dynamic section (its
type is <code>DT_NEED</code> and its value is whatever you put on the command line
(absolute or relative path), you can check it using <code>readelf -d</code>) of the
generated shared object.  It tells the dynamic linker which libraries are
needed by this shared object.</p>

<h2 id="link-with-shared-libraries">Link with shared libraries</h2>

<pre><code>$ gcc -o outputfile file1.c file2.c ... -L&lt;search path&gt; -l&lt;library name&gt; ... -Wl,-rpath,&lt;path&gt; ...
</code></pre>

<p>Like linking with static objects, when linking with shared objects the
linker needs to know which objects are required and where to find them.  It
uses the same mechanisms as linking with static objects to specify these
info.  See above “Link with Static Libraries”.</p>

<p>If the shared objects on the command line require other shared objects (you
can check this by see the entry type <code>DT_NEED</code> of <code>.dynamic</code> section), the
linker editor needs to know where to find the required shared objects.
This info can be specified with the option <code>-rpath-link</code> or
<code>-rpath</code> of ld or by other ways.  See <code>ld(1)</code> about options
<code>-rpath-link</code> and <code>-rpath</code>.</p>

<p>For example:</p>

<pre><code>$ gcc main.c -L. -lfun -Wl,-rpath,pos
</code></pre>

<p>where <code>main.c</code> depends libfun.so which depends on some shared objects
resides in <code>pos</code>.  Option <code>-Wl,</code> is a way for gcc to pass options to <code>ld</code>.</p>

<p>There are other ways to specify the link-time shared objects search path
other than the above ways and they are searched in the following order:</p>

<ol>
  <li>-rpath-link</li>
  <li>-rpath</li>
  <li>Environment variable <code>LD_LIBRARY_PATH</code></li>
  <li>system paths <code>/lib</code> and <code>/usr/lib</code></li>
  <li>the directories specified in <code>/etc/ld.so.conf</code></li>
</ol>

<p>This is incomplete.  See option <code>-rpath-link</code> of <code>ld(1)</code> for more details.</p>

<h2 id="runtime-shared-objects-search-path">Runtime shared objects search path</h2>

<p>When a executive which depends on some shared objects runs the dynamic
linker needs to load those shared objects.  So it needs to know two things:
which shared objects and where to find them.</p>

<p>The required shared objects are stored in the <code>DT_NEED</code> entry (shown as
“(NEEDED)” in output of <code>readelf -d</code>, may not exist if it does not depend
on anything) of <code>.dynamic</code> section in the object, which is specified on the
command line when generating this object file.</p>

<p>If the value of <code>DT_NEED</code> entry is a path (absolute or relative, i.e. has a
slash) the dynamic linker will try to find it there, and if not found the
executable can not run.  If it is just a file name the dynamic linker will
search for it in a series of paths in the following order:</p>

<ol>
  <li>The paths (separated by colons) in the entry <code>DT_RPATH</code> of <code>.dynamic</code>
section in the executable (these paths are specified by the option <code>-rpath</code>
of <code>ld</code> or <code>-Wl,-rpath</code> of gcc);</li>
  <li>The paths in the environment variable <code>LD_LIBRARY_PATH</code> (separated
by colons);</li>
  <li>The paths specified in <code>/etc/ld.so.conf</code> (actually <code>/etc/ld.so.cache</code>,
so if you edit <code>/etc/ld.so.conf</code> you should run <code>ldconfig</code> to update the
cache and the shared objects should be named like libxxx.so);</li>
  <li><code>/lib</code></li>
  <li><code>/usr/lib</code></li>
</ol>

<p>Note: all the paths mentioned above is relative to the current working
directory if it is a relative path.</p>

<p>You can see the searching process by setting the environment variable
<code>LD_DEBUG</code> to <code>libs</code> when running the executable.  See <code>ld.so(8)</code>.</p>

<h2 id="loading-of-dependent-shared-objects-and-symbol-resolving">Loading of dependent shared objects and symbol resolving</h2>

<p>Often the executive depends on some shared objects, which depends on some
other objects, which depends on some others, and so on.  So the depend
relation is like a graph with the executive being the root.  The Linux
dynamic linker is responsible for loading the dependent shared objects and
loads them in breadth first search (BFS) order.  The dynamic liner has a
global symbol table which includes all symbols it knows so far.  The global
symbol table is used to resolve symbols in the executive when running.  It
merges the symbol table of the shared object with global symbol table when
loaded.  If the symbol table has some symbol with the same name as a symbol
in the global symbol table, it will be ignored.  This will lead to global
symbol interposition.  So if we want to avoid this problem we must make
sure the global variables and functions in our programs have unique names.</p>

<p>The phase of symbol resolving begins after all dependent shared objects are
loaded and global symbol table is constructed.</p>

<p>The procedure of loading and symbol resolving can be checked using the env
variable <code>LD_DEBUG</code>.  See <code>ld.so(8)</code>.</p>

<h2 id="references">References</h2>

<ul>
  <li><code>ld(1)</code> options <code>-shared</code>, <code>-L</code>, <code>-l</code>, <code>-rpath</code>, <code>-rpath-link</code></li>
  <li><a href="http://man7.org/linux/man-pages/man8/ld.so.8.html"><code>ld.so(8)</code></a></li>
  <li>gcc(1) options <code>-shared</code>, <code>-static</code>, and <code>-Wl,</code></li>
  <li>See <a href="http://refspecs.linuxbase.org/elf/gabi4+/ch5.dynamic.html#shobj_dependencies">here</a> for <code>DT_RPATH</code> and <code>DT_RUNPATH</code>.</li>
  <li>程序员的自我修养，Sections 7.6, 8.4 and 8.5</li>
  <li>Computer System: A Programmer’s Perspective, Chapter 7.</li>
  <li>See <a href="https://wiki.debian.org/Multiarch/LibraryPathOverview">here</a> for multi-arch support on toolchain implications.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Gotchas]]></title>
    <link href="http://spockwangs.github.io/blog/2012/05/14/c-gotchas/"/>
    <updated>2012-05-14T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2012/05/14/c-gotchas</id>
    <content type="html"><![CDATA[<h2 id="variables-operators-and-conversions">Variables, Operators and Conversions</h2>

<p>Implicit conversions are not applied to non-const reference arguments.  See p.146 of [C++].</p>

<p>The distinction between const-reference and non-const reference parameters
is that the former matches constants and const variables while the latter
matches others in overloading resolution.  Const-reference can bind
temporary objects but non-const reference can not.</p>

<p>Not like C, consts have internal linkage by default.  However, you can use
extern to give it external linkage.  See bottom of p.199 of [C++].</p>

<p>There are four kinds of cast in C++: static_cast, dynamic_cast, const_cast, and reinterpret_cast.
<!--more--></p>

<h3 id="initialization">Initialization</h3>

<p>The global objects and class static member objects are constructed
according to their order of definition (section 9.4.1 of [C++]).  The local
static objects are constructed when accessed the first time (See section
7.1.2 of [C++]).  They are destructed in the reverse order.  An array of
class objects are initialized by calling corresponding constructors for
each of its elements, following the subscript order (clause 3 of 12.6 of
[ISO C++ 1998]).</p>

<p>The objects with static storage duration is first zero-initialized (Section
8.5 of [ISO C++ 1998]) and then initialized by calling appropriate
constructors.  Local non-static objects which are class type are
initialized by calling appropriate constructors (call default constructors
if no initializers).  Local non-static objects which are built-in types
have indeterminate initial values.  On initialization of non local objects
see 3.6.2 of [ISO C++ 1998].  On initialization of static objects see
clause 4 of section 6.7 of [ISO C++ 1998].</p>

<h3 id="program-termination">Program Termination</h3>

<ul>
  <li>By exit(): destructors for local objects are not called; destructors for constructed static objects are called.</li>
  <li>By abort(): all destructors are not called.</li>
  <li>By throwing an uncaught exception: all destructors are not called.</li>
  <li>By returning from main(): all destructors are called.</li>
  <li>See p.218 of [C++].</li>
</ul>

<h3 id="operator-overloading">Operator Overloading</h3>

<p>Overloaded operator functions must either be a member or take at least one
argument of a user-defined type.  See 11.2.3 of [C++].</p>

<h3 id="stdendl-vs-n">std::endl vs. “\n”</h3>

<p><code>std::endl</code> causes the stdout stream to be flushed while <code>\n</code> does not.</p>

<h3 id="pass-overloaded-function-as-an-template-parameter">Pass overloaded function as an template parameter</h3>

<p>Be wary when passing overloaded functions as template parameter.  Because
the passed function is not given any argument the compiler does not know
which version of the overloaded function to call.  So you must explicitly
supply template parameters with the function.</p>

<h2 id="class">Class</h2>

<p>A friend function should either be explicitly declared in an enclosing
scope or take an argument of its class.  If not, the friend cannot be
called.  See p.280 of [C++].</p>

<p>A function member of a derived class is not in the same scope as a function
member of the same name in a base class.  See section 13.2 of [ISO C++
1998].  So the function of a derived class can not overload the function of
the same name in the base class, because overloading can only happen among
the same names in the same scope.</p>

<p>The scope of typedef types in class declaration begins from where it is
defined to the end of class declaration, while the scope of class member
variables and functions extend to the whole range of the class declaration.</p>

<p>If a function does not catch an exception destructors of local objects of
that function will not be called.  (See section 9.4.1.1 of [C++].)</p>

<p>A function in derived class with more restricted access right can override
the same function in the base class.  For example, a private function in a
derived class can override the same public function in the base class.
Then I can access the private function in the derived class through virtual
mechanism.  I think it is a loophole in the C++ grammar.  It is not allowed
in Java.</p>

<p>Constructors can not be virtual but destructors can be virtual, and
sometimes it must be.  Calling virtual functions in constructors and
destructors have the same effect as calling non-virtual functions.  The
usual virtual mechanism does not make effects, because the virtual pointer
is pointing to the virtual function table of this class, not the class of
the actual object.</p>

<p>Unlike Java, you cannot define static class within another class.</p>

<p>The class defined in another class is not special in C++.  The member
functions of embedded classes can access all fields (regardless of access
rights) of the enclosing class.  The enclosing class has not any special
access rights to the inner class.  It is not allowed to access the private
or protected members of the inner class.</p>

<p>In the absence of an access-specifier for a base class, public is assumed
when the derived class is declared <code>struct</code> and private is
assumed when the class is declared <code>class</code>.</p>

<pre><code>class B { ... };
class D1 : B { ... }; 	// B private by default
struct D2 : B { ... };	// B public by default
</code></pre>

<p>Static variables declared in a function member of a class, like static
variable member, is shared by all objects of this class.</p>

<h3 id="assignment-operator">Assignment operator</h3>

<ul>
  <li>Obliterate existing object;</li>
  <li>Check for self-assignment;</li>
</ul>

<p>Assign to all data members, including those from base classes (by calling
assignment operators of base classes)</p>

<h3 id="constructor">Constructor</h3>

<p>The constructor of a class must specify a mem-initializer for all its
virtual base classes (direct or indirect) and direct base classes if they
do not have an accessible default constructor (clause 6 of 12.6.2 of [ISO
C++ 1998]).</p>

<h2 id="references">References</h2>

<ul>
  <li>[C++] The C++ Programming Language, Third Edition.</li>
  <li>[ISO C++ 1998] The C++ Standard, 1998.</li>
</ul>

]]></content>
  </entry>
  
</feed>

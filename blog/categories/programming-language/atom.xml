<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming Language | Spockwang's Blog]]></title>
  <link href="http://spockwangs.github.io/blog/categories/programming-language/atom.xml" rel="self"/>
  <link href="http://spockwangs.github.io/"/>
  <updated>2019-01-09T13:27:54+08:00</updated>
  <id>http://spockwangs.github.io/</id>
  <author>
    <name><![CDATA[spockwang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UNIX信号]]></title>
    <link href="http://spockwangs.github.io/blog/2017/12/02/unix-signals/"/>
    <updated>2017-12-02T20:27:41+08:00</updated>
    <id>http://spockwangs.github.io/blog/2017/12/02/unix-signals</id>
    <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>UNIX信号在编程中用的不多，但是对于长时间运行的程序还是很有用的，比如通知程序重新加载配置文件、提早退
出打印一些信息、监控子进程是否还活着。</p>

<p>本文将澄清UNIX信号的概念，使用信号的注意事项及常用的编程模式。
<!--more--></p>

<h1 id="unix">UNIX信号的概念</h1>

<p>当触发信号产生的事件发生时（如硬件异常、定时器过期、终端命令或者调用<code>kill()</code>发送信号），信号将发送给
相关进程或线程。当产生信号时将决定该信号时发送给进程或进程中的某个线程。如果信号的产生原因与线程有关
（如该线程产生了内存访问异常），则发送给该线程；否则，发送给该进程（例如，终端活动）。</p>

<p>信号产生后，如果没有被阻塞，则投递（deliver）给相关进程或线程执行对应的动作，或者被接受（accept，调用<code>sigwait()</code>系列函数）。</p>

<p>在线程产生到投递之间，信号处于未决状态（pending）。信号在投递前也可以被阻塞。发送给线程的信号，如果被
阻塞，且该信号的相关动作不是忽略，则该信号将一直处于未决状态，直到：1）解除阻塞；2）被接受；3）其相关
动作设置为忽略。发送给进程的信号，将发送给愿意接受该信号或没有阻塞该信号的线程处理；如果没有这样的线程
则一直处于阻塞状态，直到被某个线程：1）解除阻塞；2）接受；3）设置为忽略该信号。如果发送给进程的信号被
阻塞且其相关动作是忽略时，该信号是否直接丢弃还是处于未决状态是不确定的。</p>

<p>POSIX标准并没有要求信号可以排队，所以一个未决信号重复产生时可能只会投递或接受一次。另外，多个未决信号
在投递或接受时的顺序也是不确定的。</p>

<p>每个信号都有一个与之关联的动作，如下3种：</p>

<ul>
  <li>默认
    <ul>
      <li>默认动作由系统在程序启动时设置好。注意：有些信号的默认动作是调用<code>_exit()</code>终止程序。</li>
    </ul>
  </li>
  <li>忽略
    <ul>
      <li>注意：<code>SIGKILL</code>和<code>SIGSTOP</code>是不能设置为忽略的。</li>
    </ul>
  </li>
  <li>用户自定义函数
    <ul>
      <li>用户可设置自定义函数捕获一个信号，但是<code>SIGKILL</code>和<code>SIGSTOP</code>是无法捕获的。另外，<code>SIGSEGV</code>，<code>SIGILL</code>，
<code>SIGBUS</code>和<code>SIGFPE</code>的捕获函数必须终止程序而不能正常返回。</li>
      <li>捕获函数的实现必须保证信号安全。</li>
    </ul>
  </li>
</ul>

<h1 id="section">信号安全</h1>

<p>POSIX要求信号的捕获函数必须满足以下要求：</p>

<ul>
  <li>只能访问<code>errno</code>、<code>volatile sig_atomic_t</code>类型的全局变量或者原子类型的全局变量。</li>
  <li>只能调用规定的信号安全函数。</li>
  <li>注意保存和恢复<code>errno</code>.</li>
</ul>

<p>所以说信号的捕获函数很难实现复杂的逻辑，甚至打印消息也不行（<code>printf()</code>不是信号安全的）。只能通过
原子变量传递一些简单的信息，线程条件变量和锁都不能用（使用线程锁可能导致死锁）。</p>

<h1 id="section-1">如何注册信号处理函数</h1>

<p>系统提供了两个API注册信号处理函数，简单的版本定义如下：</p>

<p>``` c
typedef void (*sig_t) (int);</p>

<p>sig_t signal(int sig, sig_t func);
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>注册一个函数，并返回之前注册的函数。当信号投递后信号处理函数执行期间，该信号将被阻塞直到执行完毕，
</span><span class='line'>防止信号重入。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;复杂的版本定义如下，可设置信号处理有关的更多属性。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;``` c
</span><span class='line'>struct sigaction {
</span><span class='line'>    union __sigaction_u __sigaction_u;  /* signal handler &lt;em&gt;/
</span><span class='line'>    sigset_t sa_mask;               /&lt;/em&gt; signal mask to apply &lt;em&gt;/
</span><span class='line'>    int     sa_flags;               /&lt;/em&gt; see signal options below */
</span><span class='line'>};&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;union __sigaction_u {
</span><span class='line'>     void (&lt;em&gt;__sa_handler)(int);
</span><span class='line'>     void (&lt;/em&gt;__sa_sigaction)(int, siginfo_t *, void *);
</span><span class='line'>};&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 id="define-sahandler------sigactionusahandler"&gt;define sa_handler      __sigaction_u.__sa_handler&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;#define sa_sigaction    __sigaction_u.__sa_sigaction&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;int sigaction(int sig, const struct sigaction *restrict act, struct sigaction *restrict oact);</span></code></pre></td></tr></table></div></figure>
这个API相比于上面的简单版本可以设置信号处理函数执行期间是否阻塞其它信号，或者当信号中断一个慢速的IO
时是否自动重新执行IO，细节可参考<code>sigaction(2)</code>.</p>

<h1 id="section-2">信号处理的编程模式</h1>

<p>信号处理函数的要求非常严格，除了设置原子变量外也做不了其它事情，下面举一个简单的例子用终端产生信号让
程序提前结束。</p>

<p>``` c++
#include <unistd.h>
#include <signal.h>
#include <thread></thread></signal.h></unistd.h></p>

<p>volatile sig_atomic_t g_quit = 0;</p>

<p>void stop(int)
{
    g_quit = 1;
}</p>

<p>int main()
{
    signal(SIGINT, stop);
    std::thread(<a href=""></a> {
                    while (!g_quit) {
                        sleep(1);
                    }
                }).join();
    return 0;
}
```
通知线程退出的前提是该线程周期性检测是否需要退出。但是在比较复杂的场景下，周期检测并不可取，
需要采取更复杂的通信机制来通知线程退出，比如条件变量，但是信号处理函数是不能操作条件变量的，
怎么通知呢？</p>

<p>回忆一下，信号除了投递调用信号处理函数外还可以被线程主动接受，这样我们可以实现任意复杂的逻辑。
创建一个线程专门接受信号，而其它所有线程都阻塞这些信号，由这个专用线程来实现通知逻辑。</p>

<p>```c++
#include <thread>
#include <signal.h>
#include <mutex>
#include <condition_variable></condition_variable></mutex></signal.h></thread></p>

<p>int main()
{
    // Block SIGINT for all threads.  The subsequently created threads
    // will inherit this mask.
    sigset_t set;
    sigemptyset(&amp;set);
    sigaddset(&amp;set, SIGINT);
    pthread_sigmask(SIG_BLOCK, &amp;set, NULL);</p>

<pre><code>std::condition_variable cv;

// Start a thread dedicated to process signals.
std::thread([&amp;] {
                int sig;
                sigwait(&amp;set, &amp;sig);
                if (sig == SIGINT) {
                    cv.notify_one();
                }
            }).detach();

// The worker thread.
std::thread([&amp;] {
                std::mutex mutex;
                std::unique_lock&lt;std::mutex&gt; lock(mutex);
                cv.wait(lock);
            }).join();
return 0; } ```
</code></pre>

<h1 id="conclusion">Conclusion</h1>

<p>在处理信号时，如果只需要周期性检查信号是否已经发生，则可注册一个信号处理函数即可搞定。但是如果需要
处理复杂逻辑，则最好创建一个专用线程来同步处理信号。</p>

<h1 id="references">References</h1>

<ul>
  <li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/">POSIX Spec</a>, System Interfaces, Singal Concepts</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程私有存储]]></title>
    <link href="http://spockwangs.github.io/blog/2017/12/01/thread-local-storage/"/>
    <updated>2017-12-01T21:08:54+08:00</updated>
    <id>http://spockwangs.github.io/blog/2017/12/01/thread-local-storage</id>
    <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>线程私有变量（Thread Local Storage）之于线程相当于静态变量之于进程，与进程变量相比是每个线程都有一份，
也就是所谓的“私有”。也可以把线程私有变量理解为key-value对，其中key是线程ID。它的主要作用是在多线程编程
中避免锁竞争的开销。本文将重点介绍线程私有变量的几种形式、用法及其背后的实现原理。
<!--more--></p>

<h1 id="tls">显示TLS</h1>

<p>POSIX线程库提供了如下API管理TLS：</p>

<ul>
  <li><code>pthread_key_create()</code>
    <ul>
      <li>创建一个TLS变量，并设置析构函数</li>
    </ul>
  </li>
  <li><code>pthread_setspecific()</code>
    <ul>
      <li>给TLS变量赋值</li>
    </ul>
  </li>
  <li><code>pthread_getspecific()</code>
    <ul>
      <li>获取TLS变量的当前值</li>
    </ul>
  </li>
  <li><code>pthread_key_delete()</code>
    <ul>
      <li>回收TLS变量，但是注意并不调用TLS的析构函数</li>
    </ul>
  </li>
</ul>

<p>下面是一个简单的例子。</p>

<pre><code class="language-c++">#include &lt;pthread.h&gt;
#include &lt;thread&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;

using namespace std;

void cleanup(void* p)
{
    cout &lt;&lt; "clean" &lt;&lt; endl;
    int* pi = reinterpret_cast&lt;int*&gt;(p);
    delete pi;
}

int main()
{
    pthread_key_t tls_key;
    int err = pthread_key_create(&amp;tls_key, cleanup);
    assert(err == 0);
    std::thread([=] {
                    void* p = pthread_getspecific(tls_key);
                    // 还没设置过值，所以是空指针。
                    assert(p == nullptr);
                    p = new int(3);
                    int err = pthread_setspecific(tls_key, p);
                    assert(err == 0);
                    p = pthread_getspecific(tls_key);
                    int a = *reinterpret_cast&lt;int*&gt;(p);
                    assert(a == 3);
                }).join();
    void *p = pthread_getspecific(tls_key);
    // 主线程的TLS与子线程是分开的，所以还是空指针。
    assert(p == nullptr);
    
    // 由于子线程已退出，所以这里可以回收|tls_key|了。
    err = pthread_key_delete(tls_key);
    assert(err == 0);
    return 0;
}
</code></pre>

<p>有几个值得注意的地方：</p>

<ul>
  <li><code>pthread_key_delete()</code>不会自动调用每个线程TLS变量的析构函数，而且在回收key后线程在退出时也不会再调
用析构函数，所以必须要确定: 1) 所有线程已经析构TLS变量（要么显示析构，要么线程退出，像上面的例子）; 2)而且不再使用
该key时才能回收这个key.  这两个条件一般难以确定，所以实际使用时一般也不会回收key.</li>
  <li><code>pthread_setspecific()</code>在覆盖之前的value时不会主动调用析构函数，调用线程必须自己保证释放资源。</li>
  <li>TLS key的个数是有限的，通过<code>PTHREAD_KEYS_MAX</code>(limits.h)获取（在我电脑上是512）。下面我会
讲到如何突破这个限制。</li>
</ul>

<h1 id="tls-1">显示TLS的实现</h1>

<p>在Linux中每个进程有一个全局的数组管理TLS key，定义类似如下：</p>

<pre><code class="language-cpp">struct pthread_key_struct {
    uintptr_t seq;
    void (*destructor)(void*);
} __pthread_keys[PTHREAD_KEYS_MAX];
</code></pre>

<p>每个元素用于存储key的序列号（用于判断key是否有效，下面解释）和其对应的析构函数。序列号初始值为0.
<code>pthread_create_key()</code>会从该数组中找到一个还未分配的元素，将其序列号加1，记上析构函数地址，并将其下标
作为TLS key返回。那么如何判断一个key是否已分配呢？</p>

<pre><code class="language-C++">#define KEY_UNUSED(seq) (((seq) &amp; 1) == 0)
</code></pre>
<p>若序列号为偶数则表示未分配，分配时将其加1变成奇数即可。这个操作采用原子CAS来完成，以保证线程安全。在
<code>pthread_key_delete()</code>时也会将序列号加1，表示可以继续使用，通过序列号机制来保证回收的key不会被复用
（复用的key会导致线程在退出时可能会调用错误的析构函数）。但是一直加1会导致序列号回绕，还是会复用key。
所以创建key时会检查是否有回绕风险，如果有则创建失败。</p>

<pre><code class="language-C++">#define KEY_USABLE(seq) (((uintptr_t)(seq)) &lt; ((uintptr_t) ((seq) + 2)))
</code></pre>

<p>每个线程都有一个自己的线程控制块TCB（管理寄存器、线程栈等），里面有一个TLS数组(我的电脑上是32个元素）
用于存放线程私有变量。TLS数组的每个元素定义类似如下：</p>

<pre><code class="language-C++">struct pthread_key_data {
    uintptr_t seq;
    void* data;
};
</code></pre>
<p>上面提到过<code>pthread_key_create()</code>返回的TLS key其实是<code>__pthread_keys</code>数组的下标。
<code>pthread_setspecific()</code>根据TLS key定位TLS数组的一个元素，并设置其序列号seq和数据指针。
如果这个数组不够用，则会再动态分配一个二级数组（在我的电脑上是一个32x32的稀疏数组）。
线程退出时，<code>pthread_key_data</code>中的序列号用于判断该key是否仍在使用中（即与<code>__pthread_keys</code>中
的同一个下标对应的序列号是否相同），若是则调用TLS的析构函数。</p>

<h2 id="boosttls">Boost的TLS实现</h2>

<p>为了突破POSIX线程库对TLS变量个数的限制，<code>boost::thread_specific_ptr</code>只需要创建一个key，并设置该
key对应的TLS变量指向一个<code>map</code>，这样可以在该<code>map</code>中存放无数个（仅受内存限制）TLS变量。</p>

<p>另外<code>boost::thread_specific_ptr</code>的<code>reset()</code>可规避<code>pthread_setspecific()</code>忘记释放资源的坑。
不过<code>boost::thread_specific_ptr</code>的析构函数的执行时机也有与<code>pthread_key_delete()</code>一样的限制。</p>

<h1 id="tls-2">隐式TLS</h1>

<p>相比于上面显示TLS需要动态调用API构造线程私有变量，隐式TLS更加方便，采用编程语言提供的关键字声明即可。
下面是采用C++11的关键字<code>thread_local</code>重写上面的程序。</p>

<pre><code class="language-C++">#include &lt;thread&gt;
#include &lt;cassert&gt;
#include &lt;memory&gt;

using namespace std;

int main()
{
    thread_local unique_ptr&lt;int&gt; tls_int_ptr;
    std::thread([] {
                    tls_int_ptr.reset(new int(3));
                    assert(*tls_int_ptr == 3);
                }).join();
    // 主线程的TLS与子线程是分开的，所以还是空指针。
    assert(tls_int_ptr == nullptr);
    return 0;
}
</code></pre>

<p><code>thread_local</code>声明的变量在线程启动时构造，并在线程退出时析构。而且不像POSIX的TLS，没有数量限制。但是
其析构的时机没法动态控制。</p>

<h2 id="threadlocal">为什么<code>thread_local</code>不能是非静态变量</h2>

<p>根据C++11标准，<code>thread_local</code>变量必须是静态变量（名字空间变量、函数静态变量或者类的静态成员变量），不
能是类的非静态成员。例如，下面的代码是非法的:</p>

<pre><code class="language-C++">class C {
    int a;
    thread_local int b;
};
</code></pre>
<p>必须如下声明<code>b</code>是静态成员变量：</p>

<pre><code class="language-C++">class C {
    int a;
    thread_local static int b;
};
</code></pre>
<p>这有时候确实不方便，因为我们希望每个<code>C</code>对象都有自己的成员副本<code>b</code>，不过这可以用下面的方法规避这个问题：</p>

<pre><code class="language-C++">class C {
    int GetBPerThread()
    {
        return b_map[this];
    }

    int a;
    thread_local static std::map&lt;void*, int&gt; b_map;
};
</code></pre>

<p>既然可以规避，那为啥标准不直接支持呢？这是因为TLS变量的内存布局与类的非静态成员不兼容导致的。假设
<code>b</code>是一个非静态成员，那么其内存位置必然与<code>a</code>是相邻的。但是<code>a</code>是全局唯一的（对于某个C对象来讲它
是唯一的，不同的C对象有不同的<code>a</code>），如果<code>b</code>的位置与<code>a</code>相邻，则<code>b</code>也必然是唯一的，这就与其TLS变量
的身份相冲突了。</p>

<h1 id="tls-3">隐式TLS的实现</h1>

<p>下面介绍的是ELF对TLS的实现，其它对象文件格式的支持也是类似的。</p>

<h2 id="elftls">ELF中的TLS段</h2>

<p>代码中所有的全局变量都存储在<code>.data</code>（静态初始化变量）和<code>.bss</code>（未静态初始化的变量）这两个段，相应地，
TLS变量分别存储在<code>.tdata</code>（由<code>SHF_PROGBITS</code>+<code>SHF_TLS</code>标记）和<code>.tbss</code>（由<code>SHF_NOBITS</code>+
<code>SHF_TLS</code>标记）.</p>

<p>与<code>.data</code>不一样的是，运行时程序不会直接访问这些段。在程序启动后，动态链接器会对这两个段进行动态初始化
（如果有），之后这两个段不再变化，而是作为TLS的<strong>初始化镜像</strong>保存起来。每次启动一个线程时（包括启动
线程）都会分配TLS块将初始化镜像复制过来。所以每个线程启动时TLS都是相同的。</p>

<p>每个线程的TLS块都是运行时分配的，所以在链接时是不知道其地址的，要访问TLS变量必须借助动态链接器才能计算出
其地址。链接时只能知道TLS变量在TLS段中的偏移（内存中<code>.tbss</code>紧跟在<code>.tdata</code>后）。</p>

<h2 id="tls-4">TLS的运行时分配</h2>

<p>根据上面的介绍，要访问TLS变量需要确定两个信息：</p>

<ol>
  <li>定义TLS变量的模块（可执行程序exec或动态共享库DSO）；</li>
  <li>TLS变量在该模块的TLS段的偏移.</li>
</ol>

<p>这两个信息在链接时是不知道的，需要动态链接器在运行时计算。然后再根据这两个信息查找这个TLS变量在当前线程
中的地址，这需要借助如下的数据结构来完成。</p>

<p><img src="/images/tls_data_structure.jpg" title="Fig. 1 Thread-Local Storage data structures" ></p>

<p>$tp_t$表示线程$t$的线程寄存器，指向线程控制块TCB，其在0偏移处指向动态线程向量$dtv_t$. DTV第一个元素
是一个generation counter，用于判断该DTV是否需要更新，下面会进一步解释；其它元素包含了所有
该线程用到的模块的TLS块的地址，用模块ID作为下标访问。有些模块的TLS块跟TCB放在一起，是程序启动时就分配
的（如exec及其依赖的DSO），称为<em>静态模型</em>；有些模块是程序运行中动态加载的（通过<code>dlopen()</code>动态加载），
TLS块在线程第一次访问时分配，称为<em>动态模型</em>。对于静态模型，在程序启动时动态链接器就可以确定其相对于$tp_t$
的偏移值，编译器生成代码时可以直接使用这些偏移值来访问。对于动态模型，由于TLS时延迟分配的，需要调用运行时
系统提供的<code>__tls_get_addr()</code>获取其地址。</p>

<h3 id="section">程序启动</h3>

<p>程序启动时，动态链接器搜集所有模块的TLS信息，包括以下字段：</p>

<ul>
  <li>TLS初始化镜像的地址</li>
  <li>TLS初始化镜像的大小</li>
  <li>模块的偏移值$tlsoffset$</li>
  <li>是否使用静态模型</li>
</ul>

<p>动态加载一个模块时也会加入这些信息。线程库将利用这些信息为新建的线程分配TLS块和DTV.  对于使用动态模型和动态
加载的模块，线程库会延迟分配TLS块，直到第一次访问。</p>

<h3 id="tls-5">延迟分配TLS</h3>

<p>对于延迟分配的TLS，由于其偏移值在启动时未知，必须借助于<code>__tls_get_addr()</code>获取，定义类似如下：</p>

<pre><code class="language-C">struct tls_index {
    size_t module_id;
    size_t offset;
};

void* __tls_get_addr(struct tls_index* ti)
{
    // Get the DTV of current thread.
    dtv_t* dtv = GET_CURRENT_DTV();

    // Check if the DTV is stale, and if so, update it.
    if (dtv[0].counter != dl_tls_generation) {
        update_dtv();
    }

    // Get the TLS block. If not allocated yet, allocate now.
    char* tls_block = dtv[ti-&gt;module_id];
    if (tls_block == UNALLOCATED_TLS_BLOCK) {
        tls_block = dtv[ti-&gt;module_id] = allocate_tls(module_id);
    }

    return tls_block + ti-&gt;offset;
}
</code></pre>
<p><code>module_id</code>是模块ID，由动态链接器在加载模块时分配，从1开始（exec的模块ID固定是1）。</p>

<p>当动态加载或卸载一个模块时，动态链接器维护的<code>dl_tls_generation</code>会加1，表示模块信息有了变化。由于每个线
程的DTV时延迟更新的，所以每个线程的<code>dtv[0]</code>也会维护自己的<code>generation counter</code>，用于在访问TLS时判断
是否需要更新DTV.</p>

<h2 id="tls-6">TLS的访问模式</h2>

<p>上面已经提到过TLS的两种访问模式：静态模式和动态模式，这一节针对不同场景细化为4种模式。对于每一种模式，
都要求动态链接器在程序启动或动态加载模块时立即处理TLS相关的重定位。TLS的重定位是为了确定模块ID和在TLS块
中的偏移，然后存储在<code>GOT</code>表中。</p>

<p>模块ID和偏移有时候需要运行时才能确定，有时候链接时即可知道，因此组合起来可分为4种访问模式。具体采用哪种模式
由编译器和链接器共同决定。</p>

<h3 id="general-dynamic">General Dynamic</h3>

<p>支持访问所有的TLS变量，包括exec和DSO定义的TLS；也支持延迟分配TLS.  这种模式下不需要链接时知道模块ID和
偏移值。程序启动时动态链接器通过重定向确定模块ID和TLS变量的偏移值，存储在<code>GOT</code>表中。在访问TLS时调用
<code>__tls_get_addr()</code>，传入这两个参数，获取TLS变量的地址。</p>

<h3 id="local-dynamic">Local Dynamic</h3>

<p>如果链接编辑器确定访问的TLS变量属于本模块（如文件作用域的TLS变量），则采用此模型。TLS变量的偏移值在链接时
即可确定，只需要调用<code>__tls_get_addr()</code>确定TLS块的地址即可。由于TLS块的地址可以在不同的本地TLS变量
访问时复用，所以相比于GD模型编译器可利用此模型生成有效的代码减少对<code>__tls_get_addr()</code>的调用次数。例如，在同一个函数
内访问不同的本地TLS变量，只需要调用一次<code>__tls_get_addr()</code>即可。</p>

<h3 id="initial-exec">Initial Exec</h3>

<p>如果可以确定访问的TLS变量在程序启动时就已分配好，则采用此模型。TLS变量相对于线程寄存器的偏移量可在
程序启动时由动态链接器计算好存放在GOT表中。访问TLS变量相当于一次间接地址访问，不需要调用<code>__tls_get_addr()</code>.</p>

<h3 id="local-exec">Local Exec</h3>

<p>如果可以确定在exec中访问exec定义的TLS变量，则采用此模型。链接时即可知道TLS变量相对于线程寄存器的偏移量，
计算其地址相当于寄存器加上一个常量，因此访问TLS变量与访问局部变量没有区别。</p>

<h1 id="per-thread-resource-allocation-pattern">Per-thread resource allocation pattern</h1>

<p>线程局部变量可以有效避免锁竞争，根据上面介绍的TLS实现来看，访问成本与普通变量也差不多，但是它完全防止了
线程之间的通信，很多时候不满足需求。所以需要在避免竞争与线程通信之间取得平衡，一种常用的模式是每个线
程分配自己的私有资源以满足大部分需求，只有在必要的时候才与其它线程通信。如下的程序实现了并发统计，在
线程结束后由主线程汇总打印。</p>

<pre><code class="language-C++">#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;ctime&gt;
#include &lt;vector&gt;

size_t kNumThreads = 10;

int main()
{
    uint32_t stats[kNumThreads];
    std::vector&lt;std::thread&gt; threads;
    for (size_t i = 0; i &lt; kNumThreads; ++i) {
        threads.push_back(
                std::thread([&amp;, i] {
                                time_t start = std::time(nullptr);
                                do_something();
                                time_t end = std::time(nullptr);
                                stats[i] = end-start;
                            }));
    }
    for (auto&amp; t : threads) {
        t.join();
    }
    uint32_t total = 0;
    for (auto t : stats) {
        total += t;
    }
    std::cout &lt;&lt; "total=" &lt;&lt; total &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>主线程分配了一个数组，每个元素对应一个子线程，防止线程竞争。这样也方便了子线程将数据传回给主线程。
如果采用线程私有变量则比较麻烦，必须借助其它全局变量来通信。所以说为了避免竞争并不一定需要线程私有变量。</p>

<p>Linux内核很多统计即采用了这种模式，每个CPU核维护自己的统计数据，需要报告数据时则遍历所有核的数据合计
输出。著名的内存分配器tcmalloc也采用了这种模式来避免锁竞争，提高并发效率。它针对小内存的分配和释放做
了优化，小内存从本线程维护的内存池分配，大内存才从全局的内存池分配。同时为防止资源浪费，会在线程之间进行
内存资源调度，将本线程长期不用的内存转移给其它线程使用。所以说在大多数情况下避免了资源协调。</p>

<h1 id="conclusion">Conclusion</h1>

<p>如果线程之间完全不需要通信，推荐采用隐式TLS，使用非常方便，也不用担心资源释放的问题。但是如果要自己
灵活控制TLS资源的释放，则可以考虑采用显示TLS，推荐使用Boost库，可省不少心。</p>

<p>如果线程之间多少是需要通信的，不建议TLS，建议还是用共享数据结构加锁保护。为了提高性能可考虑使用原子变
量或者无锁数据结构。最终极的优化方法还是优化多线程的交互结构，尽量减少线程间通信。</p>

<h1 id="references">References</h1>

<ul>
  <li><a href="https://uclibc.org/docs/tls.pdf">ELF Handling of Thread-Local Storage</a></li>
  <li><a href="https://docs.oracle.com/cd/E19683-01/817-3677/chapter8-tbl-1/index.html">Linkers and Libraries Guide</a></li>
  <li><a href="http://david-grs.github.io/tls_performance_overhead_cost_linux/">TLS performance overhead and cost on GNU/Linux</a></li>
  <li><a href="http://blog.csdn.net/chosen0ne/article/details/9338591">TCMalloc小记</a></li>
  <li><a href="http://www.boost.org/doc/libs/1_65_1/doc/html/thread/thread_local_storage.html">Boost Thread Local Storage</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNU Tool Chain]]></title>
    <link href="http://spockwangs.github.io/blog/2012/05/14/gnu-tool-chain/"/>
    <updated>2012-05-14T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2012/05/14/gnu-tool-chain</id>
    <content type="html"><![CDATA[<h2 id="create-static-libraries">Create Static Libraries</h2>

<p>To compile source files</p>

<pre><code>$ gcc -c file1.c file2.c ...
</code></pre>

<p>To create archives</p>

<pre><code>$ ar r lib&lt;sth&gt;.a file1.o file2.o ...
</code></pre>

<p>See <code>ar(1)</code>.
<!--more--></p>

<h2 id="link-with-static-libraries">Link with Static Libraries</h2>

<pre><code>$ gcc -static -o outputfile file1.c file2.c -L&lt;search path&gt; -l&lt;archive name&gt;
</code></pre>

<p>Use option <code>-static</code> to avoid linking against shared libraries.  Use option
<code>-l</code> to specify which libraries are required and <code>-L</code> to specify where to find
these libraries.  If the required libraries are in system paths (i.e. <code>/lib</code>
and <code>/usr/lib</code>) <code>-L</code> is not required because the linker will search the system
path by default.  The paths are searched in the following order:</p>

<ol>
  <li>The paths specified by <code>-L</code> and by <code>SEARCH_DIR</code> command in the link script (not the default link
script, but the one specified by <code>-T</code>) in the command line from left to right;</li>
  <li>The paths specified by <code>SEARCH_DIR</code> command in the default link script if it is not yet replaced
by the <code>-T</code> option.</li>
</ol>

<p>The contents of the default link script can be printed by using <code>--verbose</code> option to <code>ld</code>.</p>

<p>See <code>-L</code>, <code>-T</code> and <code>-dT</code> in <code>ld(1)</code>.</p>

<h2 id="how-linkers-use-static-libraries-to-resolve-references">How Linkers Use Static Libraries to Resolve References</h2>

<p>See Section 7.6.3 of Computer Systems: A Programmer’s Perspective.</p>

<p>Watch out for mutual dependences and cyclic dependences of the static libraries.  See option <code>--start-group</code> of <code>ld(1)</code>.</p>

<h2 id="create-shared-libraries">Create Shared Libraries</h2>

<pre><code>$ gcc -shared -fpic -o somename.so file1.c file2.c ... dependent_shared_libraries
</code></pre>

<p>The dependent shared libraries will be stored in the .dynamic section (its
type is <code>DT_NEED</code> and its value is whatever you put on the command line
(absolute or relative path), you can check it using <code>readelf -d</code>) of the
generated shared object.  It tells the dynamic linker which libraries are
needed by this shared object.</p>

<h2 id="link-with-shared-libraries">Link with shared libraries</h2>

<pre><code>$ gcc -o outputfile file1.c file2.c ... -L&lt;search path&gt; -l&lt;library name&gt; ... -Wl,-rpath,&lt;path&gt; ...
</code></pre>

<p>Like linking with static objects, when linking with shared objects the
linker needs to know which objects are required and where to find them.  It
uses the same mechanisms as linking with static objects to specify these
info.  See above “Link with Static Libraries”.</p>

<p>If the shared objects on the command line require other shared objects (you
can check this by see the entry type <code>DT_NEED</code> of <code>.dynamic</code> section), the
linker editor needs to know where to find the required shared objects.
This info can be specified with the option <code>-rpath-link</code> or
<code>-rpath</code> of ld or by other ways.  See <code>ld(1)</code> about options
<code>-rpath-link</code> and <code>-rpath</code>.</p>

<p>For example:</p>

<pre><code>$ gcc main.c -L. -lfun -Wl,-rpath,pos
</code></pre>

<p>where <code>main.c</code> depends libfun.so which depends on some shared objects
resides in <code>pos</code>.  Option <code>-Wl,</code> is a way for gcc to pass options to <code>ld</code>.</p>

<p>There are other ways to specify the link-time shared objects search path
other than the above ways and they are searched in the following order:</p>

<ol>
  <li>-rpath-link</li>
  <li>-rpath</li>
  <li>Environment variable <code>LD_LIBRARY_PATH</code></li>
  <li>system paths <code>/lib</code> and <code>/usr/lib</code></li>
  <li>the directories specified in <code>/etc/ld.so.conf</code></li>
</ol>

<p>This is incomplete.  See option <code>-rpath-link</code> of <code>ld(1)</code> for more details.</p>

<h2 id="runtime-shared-objects-search-path">Runtime shared objects search path</h2>

<p>When a executive which depends on some shared objects runs the dynamic
linker needs to load those shared objects.  So it needs to know two things:
which shared objects and where to find them.</p>

<p>The required shared objects are stored in the <code>DT_NEED</code> entry (shown as
“(NEEDED)” in output of <code>readelf -d</code>, may not exist if it does not depend
on anything) of <code>.dynamic</code> section in the object, which is specified on the
command line when generating this object file.</p>

<p>If the value of <code>DT_NEED</code> entry is a path (absolute or relative, i.e. has a
slash) the dynamic linker will try to find it there, and if not found the
executable can not run.  If it is just a file name the dynamic linker will
search for it in a series of paths in the following order:</p>

<ol>
  <li>The paths (separated by colons) in the entry <code>DT_RPATH</code> of <code>.dynamic</code>
section in the executable (these paths are specified by the option <code>-rpath</code>
of <code>ld</code> or <code>-Wl,-rpath</code> of gcc);</li>
  <li>The paths in the environment variable <code>LD_LIBRARY_PATH</code> (separated
by colons);</li>
  <li>The paths specified in <code>/etc/ld.so.conf</code> (actually <code>/etc/ld.so.cache</code>,
so if you edit <code>/etc/ld.so.conf</code> you should run <code>ldconfig</code> to update the
cache and the shared objects should be named like libxxx.so);</li>
  <li><code>/lib</code></li>
  <li><code>/usr/lib</code></li>
</ol>

<p>Note: all the paths mentioned above is relative to the current working
directory if it is a relative path.</p>

<p>You can see the searching process by setting the environment variable
<code>LD_DEBUG</code> to <code>libs</code> when running the executable.  See <code>ld.so(8)</code>.</p>

<h2 id="loading-of-dependent-shared-objects-and-symbol-resolving">Loading of dependent shared objects and symbol resolving</h2>

<p>Often the executive depends on some shared objects, which depends on some
other objects, which depends on some others, and so on.  So the depend
relation is like a graph with the executive being the root.  The Linux
dynamic linker is responsible for loading the dependent shared objects and
loads them in breadth first search (BFS) order.  The dynamic liner has a
global symbol table which includes all symbols it knows so far.  The global
symbol table is used to resolve symbols in the executive when running.  It
merges the symbol table of the shared object with global symbol table when
loaded.  If the symbol table has some symbol with the same name as a symbol
in the global symbol table, it will be ignored.  This will lead to global
symbol interposition.  So if we want to avoid this problem we must make
sure the global variables and functions in our programs have unique names.</p>

<p>The phase of symbol resolving begins after all dependent shared objects are
loaded and global symbol table is constructed.</p>

<p>The procedure of loading and symbol resolving can be checked using the env
variable <code>LD_DEBUG</code>.  See <code>ld.so(8)</code>.</p>

<h2 id="references">References</h2>

<ul>
  <li><code>ld(1)</code> options <code>-shared</code>, <code>-L</code>, <code>-l</code>, <code>-rpath</code>, <code>-rpath-link</code></li>
  <li><a href="http://man7.org/linux/man-pages/man8/ld.so.8.html"><code>ld.so(8)</code></a></li>
  <li>gcc(1) options <code>-shared</code>, <code>-static</code>, and <code>-Wl,</code></li>
  <li>See <a href="http://refspecs.linuxbase.org/elf/gabi4+/ch5.dynamic.html#shobj_dependencies">here</a> for <code>DT_RPATH</code> and <code>DT_RUNPATH</code>.</li>
  <li>程序员的自我修养，Sections 7.6, 8.4 and 8.5</li>
  <li>Computer System: A Programmer’s Perspective, Chapter 7.</li>
  <li>See <a href="https://wiki.debian.org/Multiarch/LibraryPathOverview">here</a> for multi-arch support on toolchain implications.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Gotchas]]></title>
    <link href="http://spockwangs.github.io/blog/2012/05/14/c-gotchas/"/>
    <updated>2012-05-14T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2012/05/14/c-gotchas</id>
    <content type="html"><![CDATA[<h2 id="variables-operators-and-conversions">Variables, Operators and Conversions</h2>

<p>Implicit conversions are not applied to non-const reference arguments.  See p.146 of [C++].</p>

<p>The distinction between const-reference and non-const reference parameters
is that the former matches constants and const variables while the latter
matches others in overloading resolution.  Const-reference can bind
temporary objects but non-const reference can not.</p>

<p>Not like C, consts have internal linkage by default.  However, you can use
extern to give it external linkage.  See bottom of p.199 of [C++].</p>

<p>There are four kinds of cast in C++: static_cast, dynamic_cast, const_cast, and reinterpret_cast.
<!--more--></p>

<h3 id="initialization">Initialization</h3>

<p>The global objects and class static member objects are constructed
according to their order of definition (section 9.4.1 of [C++]).  The local
static objects are constructed when accessed the first time (See section
7.1.2 of [C++]).  They are destructed in the reverse order.  An array of
class objects are initialized by calling corresponding constructors for
each of its elements, following the subscript order (clause 3 of 12.6 of
[ISO C++ 1998]).</p>

<p>The objects with static storage duration is first zero-initialized (Section
8.5 of [ISO C++ 1998]) and then initialized by calling appropriate
constructors.  Local non-static objects which are class type are
initialized by calling appropriate constructors (call default constructors
if no initializers).  Local non-static objects which are built-in types
have indeterminate initial values.  On initialization of non local objects
see 3.6.2 of [ISO C++ 1998].  On initialization of static objects see
clause 4 of section 6.7 of [ISO C++ 1998].</p>

<h3 id="program-termination">Program Termination</h3>

<ul>
  <li>By exit(): destructors for local objects are not called; destructors for constructed static objects are called.</li>
  <li>By abort(): all destructors are not called.</li>
  <li>By throwing an uncaught exception: all destructors are not called.</li>
  <li>By returning from main(): all destructors are called.</li>
  <li>See p.218 of [C++].</li>
</ul>

<h3 id="operator-overloading">Operator Overloading</h3>

<p>Overloaded operator functions must either be a member or take at least one
argument of a user-defined type.  See 11.2.3 of [C++].</p>

<h3 id="stdendl-vs-n">std::endl vs. “\n”</h3>

<p><code>std::endl</code> causes the stdout stream to be flushed while <code>\n</code> does not.</p>

<h3 id="pass-overloaded-function-as-an-template-parameter">Pass overloaded function as an template parameter</h3>

<p>Be wary when passing overloaded functions as template parameter.  Because
the passed function is not given any argument the compiler does not know
which version of the overloaded function to call.  So you must explicitly
supply template parameters with the function.</p>

<h2 id="class">Class</h2>

<p>A friend function should either be explicitly declared in an enclosing
scope or take an argument of its class.  If not, the friend cannot be
called.  See p.280 of [C++].</p>

<p>A function member of a derived class is not in the same scope as a function
member of the same name in a base class.  See section 13.2 of [ISO C++
1998].  So the function of a derived class can not overload the function of
the same name in the base class, because overloading can only happen among
the same names in the same scope.</p>

<p>The scope of typedef types in class declaration begins from where it is
defined to the end of class declaration, while the scope of class member
variables and functions extend to the whole range of the class declaration.</p>

<p>If a function does not catch an exception destructors of local objects of
that function will not be called.  (See section 9.4.1.1 of [C++].)</p>

<p>A function in derived class with more restricted access right can override
the same function in the base class.  For example, a private function in a
derived class can override the same public function in the base class.
Then I can access the private function in the derived class through virtual
mechanism.  I think it is a loophole in the C++ grammar.  It is not allowed
in Java.</p>

<p>Constructors can not be virtual but destructors can be virtual, and
sometimes it must be.  Calling virtual functions in constructors and
destructors have the same effect as calling non-virtual functions.  The
usual virtual mechanism does not make effects, because the virtual pointer
is pointing to the virtual function table of this class, not the class of
the actual object.</p>

<p>Unlike Java, you cannot define static class within another class.</p>

<p>The class defined in another class is not special in C++.  The member
functions of embedded classes can access all fields (regardless of access
rights) of the enclosing class.  The enclosing class has not any special
access rights to the inner class.  It is not allowed to access the private
or protected members of the inner class.</p>

<p>In the absence of an access-specifier for a base class, public is assumed
when the derived class is declared <code>struct</code> and private is
assumed when the class is declared <code>class</code>.</p>

<pre><code>class B { ... };
class D1 : B { ... }; 	// B private by default
struct D2 : B { ... };	// B public by default
</code></pre>

<p>Static variables declared in a function member of a class, like static
variable member, is shared by all objects of this class.</p>

<h3 id="assignment-operator">Assignment operator</h3>

<ul>
  <li>Obliterate existing object;</li>
  <li>Check for self-assignment;</li>
</ul>

<p>Assign to all data members, including those from base classes (by calling
assignment operators of base classes)</p>

<h3 id="constructor">Constructor</h3>

<p>The constructor of a class must specify a mem-initializer for all its
virtual base classes (direct or indirect) and direct base classes if they
do not have an accessible default constructor (clause 6 of 12.6.2 of [ISO
C++ 1998]).</p>

<h2 id="references">References</h2>

<ul>
  <li>[C++] The C++ Programming Language, Third Edition.</li>
  <li>[ISO C++ 1998] The C++ Standard, 1998.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Gotchas]]></title>
    <link href="http://spockwangs.github.io/blog/2012/05/13/java-gotchas-2/"/>
    <updated>2012-05-13T00:00:00+08:00</updated>
    <id>http://spockwangs.github.io/blog/2012/05/13/java-gotchas-2</id>
    <content type="html"><![CDATA[<h2 id="primitive-types-operators-and-conversions">Primitive types, Operators, and Conversions</h2>

<p><code>==</code> tests object identity (whether the variable references the
same object), not content identity (consider <code>equals()</code>
instead).
<!--more--></p>

<p>Assignment semantics in Java: copy reference for object variables(cf clone), and copy value for basic types.</p>

<p><code>&gt;&gt;</code> do arithmetic right shift (shift in 0 for unsigned types
and 1 for signed types), while <code>&gt;&gt;&gt;</code> do logical right shift
(always shift in 0 regardless of sign).</p>

<p>Java command line args (<code>String[]</code> args in main) do not take
into account the name of the program, i.e. “java prog arg1 arg2” has 2
arguments (arg1 and arg2), it does not count prog.</p>

<p>In Java all number types are signed except char.</p>

<p>No conversions between boolean and any other type are applied.</p>

<p>All narrower than int types are converted to int before doing arithmetic,
so byte b = 0xFF; b »&gt; 1 may not be what you want.</p>

<p>Watch out for autobox and unbox, i.e. conversions between basic types and
their wrapper types.  Sometimes it does not work.  For example, what does
this print?</p>

<pre><code>public class box {
    public static void main(String[] args)  throws IOException  {
        cmp(new Integer(42), new Integer(42));
    }

    static void cmp(Integer first, Integer second)  {
        if (first &lt; second)
            System.out.printf("%d &lt; %d\n", first, second);
        else if (first == second)
            System.out.printf("%d == %d\n", first, second);
        else if (first &gt; second)
            System.out.printf("%d &gt; %d\n", first, second);
    }
}
</code></pre>

<h2 id="class">Class</h2>

<p>You can not override the same method of base class with a weaker access
privilege.  For example, you can not override a public method with a
protected method.  This is different from C++.</p>

<p>Due to reference assignment semantics in Java, there is no built-in
mechanisms to do copy (to get a duplicate object exactly the same as the
original one).  There are two methods to achieve this: override the clone
method publicly or provide a copy constructor (or a static factory).  See
item 10 of “Effective Java”.</p>

<p>An inner class (non-static class declared in another class, which is called
its enclosing class) can access any member of its enclosing class.  And its
enclosing class can also access any member of its inner class.</p>

<p>In Java a method of a class can overload with the method of its super class
with the same name.  To the contrary in C++ this situation is not called
overloading because the two methods are not declared in the same scope.</p>
]]></content>
  </entry>
  
</feed>
